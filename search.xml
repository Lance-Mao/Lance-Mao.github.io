<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python_numPy学习]]></title>
    <url>%2F2018%2F04%2F10%2Fpython_numPy%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[numPy 维基百科 特点NumPy引用CPython(一个使用字节码的解释器)，而在这个Python实现解释器上所写的数学算法代码通常远比编译过的相同代码要来得慢。为了解决这个难题，NumPy引入了多维数组以及可以直接有效率地操作多维数组的函数与运算符。因此在NumPy上只要能被表示为针对数组或矩阵运算的算法，其运行效率几乎都可以与编译过的等效C语言代码一样快。[1] NumPy提供了与MATLAB相似的功能与操作方式，因为两者皆为解释型语言，并且都可以让用户在针对数组或矩阵运算时提供较标量运算更快的性能。两者相较之下，MATLAB提供了大量的扩充工具箱(例如Simulink)；而NumPy则是根基于Python这个更现代、完整并且开放源代码的编程语言之上。此外NumPy也可以结合其它的Python扩充库。例如SciPy，这个库提供了更多与MATLAB相似的功能；以及Matplotlib，这是一个与MATLAB内置绘图功能类似的库。而从本质上来说，NumPy与MATLAB同样是利用BLAS与LAPACK来提供高效率的线性代数运算。 ndarray 数据结构NumPy的核心功能是”ndarray”(即n-dimensional array，多维数组)数据结构。这是一个表示多维度、同质并且固定大小的数组对象。而由一个与此数组相关系的数据类型对象来描述其数组元素的数据格式(例如其字符组顺序、在存储器中占用的字符组数量、整数或者浮点数等等)。 数组创建 NumPy的基础是一个同构的多维数据，数组中的元素可以通过下标来索引。在NumPy中，维度称之为axis（复数是axes），维度的数量称之为rank。 首先获取NumPy,具体方式请打开链接 默认书写方式 1import numpy as np 创建data1、data2两个普通数组，data1的rank为1,axis的长度为6。data2的rank为2，axis的长度为4。 123456&gt;&gt;&gt; data1 = [6,7.5,8,0,1]&gt;&gt;&gt; data2 = [[1,2,3,4],[5,6,7,8]]&gt;&gt;&gt; data1[6, 7.5, 8, 0, 1]&gt;&gt;&gt; data2[[1, 2, 3, 4], [5, 6, 7, 8]] 通过array函数来创建NumPy的数组 1234567&gt;&gt;&gt; arr1 = np.array(data1)&gt;&gt;&gt; arr2 = np.array(data2)&gt;&gt;&gt; arr1array([6. , 7.5, 8. , 0. , 1. ])&gt;&gt;&gt; arr2array([[1, 2, 3, 4], [5, 6, 7, 8]]) NumPy的数组类是ndarray，它有一个别名是 numpy.array，但这与Python标准库的array.array并不一样。后者仅仅是一个一维数组。而ndarray具有以下的属性： ndarray.ndim：数组的维数。在Python世界中，维数称之为rank ndarray.shape：数组的维度。这是一系列数字，长度由数组的维度（ndim）决定。例如：长度为n的一维数组的shape是n。一个n行m列的矩阵的shape是n,m ndarray.size：数组中所有元素的数量 ndarray.dtype：数组中元素的类型，例如numpy.int32, numpy.int16或者numpy.float64 ndarray.itemsize：数组中每个元素的大小，单位为字节 ndarray.data：存储数组元素的缓冲。通常我们只需要通过下标来访问元素，而不需要访问缓冲 ndarray属性实例 1234567891011121314151617181920&gt;&gt;&gt; arr1.ndim1&gt;&gt;&gt; arr2.ndim2&gt;&gt;&gt; arr1.shape(5,)&gt;&gt;&gt; arr2.shape(2, 4)&gt;&gt;&gt; arr1.size5&gt;&gt;&gt; arr2.size8&gt;&gt;&gt; arr1.dtypedtype(&apos;float64&apos;)&gt;&gt;&gt; arr2.dtypedtype(&apos;int64&apos;)&gt;&gt;&gt; arr1.itemsize8&gt;&gt;&gt; arr2.itemsize8 创建指定的数组 指定rank为2： 12&gt;&gt;&gt; np.array([1, 2, 3], ndmin=2)array([[1, 2, 3]]) 指定为complex类型的数据： 12&gt;&gt;&gt; np.array([1, 2, 3], dtype=complex)array([1.+0.j, 2.+0.j, 3.+0.j]) 生成数组并赋为特殊值： ones：全1 zeros：全0 empty：随机数，取决于内存情况 1234567891011121314&gt;&gt;&gt; np.zeros( (3,4) )array([[ 0., 0., 0., 0.], [ 0., 0., 0., 0.], [ 0., 0., 0., 0.]])&gt;&gt;&gt; np.ones( (2,3,4), dtype=np.int16 )array([[[ 1, 1, 1, 1], [ 1, 1, 1, 1], [ 1, 1, 1, 1]], [[ 1, 1, 1, 1], [ 1, 1, 1, 1], [ 1, 1, 1, 1]]], dtype=int16)&gt;&gt;&gt; np.empty( (2,3) )array([[ 3.73603959e-262, 6.02658058e-154, 6.55490914e-260], [ 5.30498948e-313, 3.14673309e-307, 1.00000000e+000]]) 生成均匀分布的array： arange（最小值，最大值，步长）（左闭右开） linspace（最小值，最大值，元素数量） 12345&gt;&gt;&gt; np.arange( 10, 30, 5 )array([10, 15, 20, 25])&gt;&gt;&gt; np.linspace( 0, 9, 10)array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.]) 生成随机数random： 123&gt;&gt;&gt; np.random.random((2,3))array([[0.41604856, 0.7216842 , 0.88832856], [0.42092882, 0.44241471, 0.07187805]]) Shape与操作根据已有数组进行相关的操作来产生一些新的数据结构 reshape：根据已有数组和指定的shape，生成一个新的数组 12345&gt;&gt;&gt; b = np.array([1,2,3,4,5,6,7,8,9])&gt;&gt;&gt; b.reshape((3,3))array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) 注意：形状变化的原则是数组元素不能发生改变，比如这样写就是错误的，因为数组元素发生了变化。 1234&gt;&gt;&gt; b.reshape((4,3))Traceback (most recent call last): File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt;ValueError: cannot reshape array of size 10 into shape (4,3) vstack：用来将多个数组在垂直（v代表vertical）方向拼接（数组的维度必须匹配） 1234567&gt;&gt;&gt; a1 = [1,2,3]&gt;&gt;&gt; a2 = [4,5,6]&gt;&gt;&gt; a3 = [7,8,9]&gt;&gt;&gt; np.vstack((a1,a2,a3))array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) hstack：用来将多个数组在水平（h代表horizontal）方向拼接（数组的维度必须匹配） 12np.hstack((a1,a2,a3))array([1, 2, 3, 4, 5, 6, 7, 8, 9]) hsplit：用来将数组在水平方向拆分 123456789&gt;&gt;&gt; b1 = np.vstack((a1,a2,a3))&gt;&gt;&gt; np.hsplit(b1,3)[array([[1], [4], [7]]), array([[2], [5], [8]]), array([[3], [6], [9]])] vsplit：用来将数组在垂直方向拆分 12&gt;&gt;&gt; np.vsplit(b1,3)[array([[1, 2, 3]]), array([[4, 5, 6]]), array([[7, 8, 9]])] 相关运算 基本运算 1234567891011&gt;&gt;&gt; a = np.array( [20,30,40,50] )&gt;&gt;&gt; b = np.arange( 4 )&gt;&gt;&gt; barray([0, 1, 2, 3])&gt;&gt;&gt; c = a-b&gt;&gt;&gt; carray([20, 29, 38, 47])&gt;&gt;&gt; b**2array([0, 1, 4, 9])&gt;&gt;&gt; a &gt; 35array([False, False, True, True]) 数组相乘，对应位置相乘 12345&gt;&gt;&gt; ab1 = np.array([[1,2],[3,4]])&gt;&gt;&gt; ab2 = np.array([[5,6],[7,8]])&gt;&gt;&gt; ab1 * ab2array([[ 5, 12], [21, 32]]) 矩阵乘法，使用dot 123&gt;&gt;&gt; ab1.dot(ab2)array([[19, 22], [43, 50]]) 内置函数（min,max,sum)，同时可以使用axis指定对哪一维进行操作 12345678910111213141516&gt;&gt;&gt; b = np.arange(12).reshape(3,4)&gt;&gt;&gt; barray([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]])&gt;&gt;&gt;&gt;&gt;&gt; b.sum(axis=0)array([12, 15, 18, 21])&gt;&gt;&gt;&gt;&gt;&gt; b.min(axis=1)array([0, 4, 8])&gt;&gt;&gt;&gt;&gt;&gt; b.cumsum(axis=1)array([[ 0, 1, 3, 6], [ 4, 9, 15, 22], [ 8, 17, 27, 38]]) 参考资料 1、SciPy.org2、利用python进行数据分析 密码: s8wx]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>numPy</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webpack配置react开发环境]]></title>
    <url>%2F2018%2F04%2F05%2Fwebpack%E9%85%8D%E7%BD%AEreact%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[npm npm 是一个基于 Nodejs 的 JavaScript 包管理工具，全称叫做 Node Package Manager，所谓的包呢，其实就是可复用的代码，每个人都可以把自己编写的代码库发布到 npm 的源（英文叫做 registry）上面进行管理，你也可以下载别人开发好的包，在你自己的应用当中使用。 我们所熟知的，jQuery/Bootstrap/React 等框架或库都被托管在 npm 上。通过使用 npm 作为项目的包管理工具，我们可以很方便地在我们的开发项目中引入以及管理第三方的框架或者库，而不需要像以前前端开发的原始时期一样，手动复制粘贴代码文件。 切换npm为国内的镜像源 由于npm的官方服务器在国外，因此我们在使用时，速度会非常慢，从而使开发效率降低。需要手动切换 npm 到国内的镜像源。淘宝 NPM 镜像 在ubuntu中npm默认是安装在系统文件夹下的，修改步骤 12cd ~npm config set registry https://registry.npm.taobao.org 检验一下刚才的配置是否成功。1npm config get registry 或者安装cnpm1npm install -g cnpm --registry=https://registry.npm.taobao.org 安装React开发环境 进入相应文件夹，创建一个项目12cd WebstormProjects/mkdir demo001 使用默认设置初始化项目的 npm 配置，在项目目录中会生成一个 package.json 文件，里面会保存项目的基本信息、命令脚本以及依赖的库等信息。1npm init -y 项目依赖包安装1cnpm install --save react react-dom babelify babel-preset-react babel-preset-es2015 --save-dev 创建相关文件123touch index.jstouch index.htmltouch webpack.config.js index.js里面的内容harmony1234567import React from 'react'import ReactDom from 'react-dom'ReactDom.render(&lt;h1&gt;hello, world!&lt;/h1&gt;,document.getElementById('example')); index.html里面的内容1234&lt;div id=&quot;example&quot;&gt;&lt;/div&gt;&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt; 注意此时打开index.html控制台会报错，接下来需要用到webpack来管理react项目 WebPack WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。 Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。 安装webpack // 全局安装123cnpm install webpack webpack-cli -gcnpm install webpack-dev-server -g// --save是要保存到package.json中，dev是在开发时使用这个包，而生产环境中不使用。 当前项目下安装123cnpm install webpack webpack-cli --save-devcnpm install webpack-dev-server --save-dev// 4.0版本之后的webpack，已经将webpack命令工具迁移到webpack-cli模块了。需要安装webpack-cli。 在根目录创建webpack.config.js文件。内容如下harmony123456789101112131415161718192021const path =require('path'); module.exports = &#123; entry: path.resolve(__dirname, 'index.js'), output: &#123; path: path.resolve(__dirname, ''), filename: "bundle.js" &#125;, mode: 'development', module: &#123; rules: [ &#123; test: /\.js$/, exclude: /node_modules/, loader: "babel-loader", options: &#123; presets: ["es2015","react"] &#125; &#125; ] &#125; &#125;; entry定义了入口文件，output定义了编译后的输出。该配置内容的作用是这个项目入口文件是index.js文件，编译后，，最后把编译后的文件输出到根目录下，命名为bundle.js。 安装完成后执行该命令，进行编译1webpack 编译完成后，刷新根目录，可以看到根目录下已经生成bundle.js文件。此时打开index.html可以看到页面正常显示出hello, world!。基本的环境搭建就已经完成。 热启动项目以上虽然已经完成了该项目的相关配置，但是我们每次改动代码时，都需要手动进行编译，浪费很多时间。直接执行webpack-dev-server即可自动刷新浏览器]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jquery-dom操作]]></title>
    <url>%2F2018%2F04%2F04%2FjQuery_DOM%2F</url>
    <content type="text"><![CDATA[DOM节点的创建jQuery节点创建与属性的处理创建元素节点：1$(&quot;&lt;div&gt;&lt;/div&gt;&quot;) 创建为属性节点：1$(&quot;&lt;div id=&apos;test&apos; class=&apos;aaron&apos;&gt;TEXT&lt;/div&gt;&quot;) DOM节点的插入DOM内部插入append()与appendTo() append：这个操作与对指定的元素执行原生的appendChild方法，将它们添加到文档中的情况类似。 appendTo：实际上，使用这个方法是颠倒了常规的$(A).append(B)的操作，即不是把B追加到A中，而是把A追加到B中。 1234567891011121314151617181920&lt;script type=&quot;text/javascript&quot;&gt; $(&quot;#bt1&quot;).on(&apos;click&apos;, function() &#123; //.append(), 内容在方法的后面， //参数是将要插入的内容。 $(&quot;.content&quot;).append(&apos;&lt;div class=&quot;append&quot;&gt;通过append方法添加的元素&lt;/div&gt;&apos;) &#125;)&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; $(&quot;#bt2&quot;).on(&apos;click&apos;, function() &#123; //.appendTo()刚好相反，内容在方法前面， //无论是一个选择器表达式 或创建作为标记上的标记 //它都将被插入到目标容器的末尾。 $(&apos;&lt;div class=&quot;appendTo&quot;&gt;通过appendTo方法添加的元素&lt;/div&gt;&apos;).appendTo($(&quot;.content&quot;)) &#125;)&lt;/script&gt; DOM外部插入after()与before() .after(content)：在匹配元素集合中的每个元素后面插入参数所指定的内容，作为其兄弟节点 .before(content)：与上同理，只是在匹配元素前面插入内容 12345678910111213&lt;script type=&quot;text/javascript&quot;&gt;$(&quot;#bt1&quot;).on(&apos;click&apos;, function() &#123; //在匹配test1元素集合中的每个元素前面插入p元素 $(&quot;.test1&quot;).before(&apos;&lt;p style=&quot;color:red&quot;&gt;before,在匹配元素之前增加&lt;/p&gt;&apos;, &apos;&lt;p style=&quot;color:red&quot;&gt;多参数&lt;/p&gt;&apos;)&#125;)&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;$(&quot;#bt2&quot;).on(&apos;click&apos;, function() &#123; //在匹配test1元素集合中的每个元素后面插入p元素 $(&quot;.test2&quot;).after(&apos;&lt;p style=&quot;color:blue&quot;&gt;after,在匹配元素之后增加&lt;/p&gt;&apos;, &apos;&lt;p style=&quot;color:blue&quot;&gt;多参数&lt;/p&gt;&apos;)&#125;)&lt;/script&gt; DOM内部插入prepend()与prependTo() prepend：向每个匹配的元素内部前置内容 prepend：把所有匹配的元素前置到另一个指定的元素集合中 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;style&gt; .aaron1&#123; border: 1px solid red; &#125; .aaron2&#123; border: 1px solid blue; &#125; .aaron2 p &#123; color: #FF2255; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h2&gt;通过prepend与prependTo添加元素&lt;/h2&gt;&lt;button id=&quot;bt1&quot;&gt;点击通过jQuery的prepend添加元素&lt;/button&gt;&lt;button id=&quot;bt2&quot;&gt;点击通过jQuery的prependTo添加元素&lt;/button&gt;&lt;div class=&quot;aaron1&quot;&gt; &lt;p&gt;测试prepend&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;aaron2&quot;&gt; &lt;p&gt;测试prependTo&lt;/p&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt; $(&quot;#bt1&quot;).on(&apos;click&apos;, function() &#123; //找到class=&quot;aaron1&quot;的div节点 //然后通过prepend在内部的首位置添加一个新的p节点 $(&apos;.aaron1&apos;) .prepend(&apos;&lt;p&gt;prepend增加的p元素&lt;/p&gt;&apos;) &#125;)&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; $(&quot;#bt2&quot;).on(&apos;click&apos;, function() &#123; //找到class=&quot;aaron2&quot;的div节点 //然后通过prependTo内部的首位置添加一个新的p节点 $(&apos;&lt;p&gt;prependTo增加的p元素&lt;/p&gt;&apos;) .prependTo($(&apos;.aaron2&apos;)) &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 效果图 总结下内部操作四个方法的区别： append()向每个匹配的元素内部追加内容 prepend()向每个匹配的元素内部前置内容 appendTo()把所有匹配的元素追加到另一个指定元素的集合中 prependTo()把所有匹配的元素前置到另一个指定的元素集合中 DOM外部插入insertAfter()与insertBefore() insertBefore：在目标元素前面插入集合中每个匹配的元素 insertAfter：在目标元素后面插入集合中每个匹配的元素 注意 insertAfter将JQuery封装好的元素插入到指定元素的后面，如果元素后面有元素了，那将后面的元素后移，然后将JQuery对象插入； insertBefore将JQuery封装好的元素插入到指定元素的前面，如果元素前面有元素了，那将前面的元素前移，然后将JQuery对象插入； DOM节点的删除DOM节点删除之empty()的基本用法empty()方法跟删除不一样，empty()只移除指定元素中所有的子节点，同样移除元素里的文本。但是本身元素不被删除 1&lt;div class=&quot;example&quot;&gt;&lt;p&gt;测试empty()&lt;/p&gt;&lt;/div&gt; 通过empty处理 1$(&apos;.example&apos;).empty() 结果 1&lt;div class=&quot;example&quot;&gt;&lt;/div&gt; DOM节点删除之remove()的有参用法和无参用法remove与empty一样，都是移除元素的方法，但是remove会将元素自身移除，同时也会移除元素内部的一切，包括绑定的事件及与该元素相关的jQuery数据。 123456789101112&lt;script type=&quot;text/javascript&quot;&gt; $(&quot;#button1&quot;).on(&apos;click&apos;, function() &#123; //删除整个 class=test1的div节点 $(&quot;.test1&quot;).remove() &#125;) $(&quot;#button2&quot;).on(&apos;click&apos;, function() &#123; //找到所有p元素中，包含了3的元素 //这个也是一个过滤器的处理 $(&quot;p&quot;).remove(&quot;:contains(&apos;3&apos;)&quot;) &#125;)&lt;/script&gt; DOM节点删除之empty和remove区别empty方法 严格地讲，empty()方法并不是删除节点，而是清空节点，它能清空元素中的所有后代节点 empty不能删除自己本身这个节点 remove方法 该节点与该节点所包含的所有后代节点将同时被删除 提供传递一个筛选的表达式，删除指定合集中的元素 DOM节点删除之保留数据的删除操作detach()删除页面上的节点，但是节点上的数据与事件不会丢失。 12345678910111213141516171819202122232425&lt;div&gt; &lt;p&gt;P元素1，默认给绑定一个点击事件&lt;/p&gt; &lt;p&gt;P元素2，默认给绑定一个点击事件&lt;/p&gt; &lt;button id=&quot;bt1&quot;&gt;点击删除 p 元素&lt;/button&gt; &lt;button id=&quot;bt2&quot;&gt;点击移动 p 元素&lt;/button&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt; $(&apos;p&apos;).click(function(e) &#123; alert(e.target.innerHTML) &#125;) var p; $(&quot;#bt1&quot;).click(function() &#123; if (!$(&quot;p&quot;).length) return; //去重 //通过detach方法删除元素 //只是页面不可见，但是这个节点还是保存在内存中 //数据与事件都不会丢失 p = $(&quot;p&quot;).detach() &#125;); $(&quot;#bt2&quot;).click(function() &#123; //把p元素在添加到页面中 //事件还是存在 $(&quot;body&quot;).append(p); &#125;);&lt;/script&gt; DOM节点删除之detach()和remove()区别remove：移除节点 无参数，移除自身整个节点以及该节点的内部的所有节点，包括节点上事件与数据 有参数，移除筛选出的节点以及该节点的内部的所有节点，包括节点上事件与数据 detach：移除节点 移除的处理与remove一致 与remove()不同的是，所有绑定的事件、附加的数据等都会保留下来例如：$(“p”).detach()这一句会移除对象，仅仅是显示效果没有了。但是内存中还是存在的。当你append之后，又重新回到了文档流中。就又显示出来了。 DOM节点的复制与替换DOM拷贝clone() .clone()方法深度 复制所有匹配的元素集合，包括所有匹配元素、匹配元素的下级元素、文字节点。 1234567891011HTML部分&lt;div&gt;&lt;/div&gt;JavaScript部分$(&quot;div&quot;).on(&apos;click&apos;, function() &#123;//执行操作&#125;)//clone处理一$(&quot;div&quot;).clone() //只克隆了结构，事件丢失//clone处理二$(&quot;div&quot;).clone(true) //结构、事件与数据都克隆 DOM替换replaceWith()和replaceAll().replaceWith( newContent )：用提供的内容替换集合中所有匹配的元素并且返回被删除元素的集合12345&lt;div&gt; &lt;p&gt;第一段&lt;/p&gt; &lt;p&gt;第二段&lt;/p&gt; &lt;p&gt;第三段&lt;/p&gt;&lt;/div&gt; 替换第二段的节点与内容 1$(&quot;p:eq(1)&quot;).replaceWith(&apos;&lt;a style=&quot;color:red&quot;&gt;替换第二段的内容&lt;/a&gt;&apos;) 结果12345&lt;div&gt; &lt;p&gt;第一段&lt;/p&gt; &lt;a style=&quot;color:red&quot;&gt;替换第二段的内容&lt;/a&gt;&apos; &lt;p&gt;第三段&lt;/p&gt;&lt;/div&gt; .replaceAll( target ) ：用集合的匹配元素替换每个目标元素.replaceAll()和.replaceWith()功能类似，但是目标和源相反，用上述的HTML结构，我们用replaceAll处理 1$(&apos;&lt;a style=&quot;color:red&quot;&gt;替换第二段的内容&lt;/a&gt;&apos;).replaceAll(&apos;p:eq(1)&apos;) 总结 .replaceAll()和.replaceWith()功能类似，主要是目标和源的位置区别 .replaceWith()与.replaceAll() 方法会删除与节点相关联的所有数据和事件处理程序 .replaceWith()方法，和大部分其他jQuery方法一样，返回jQuery对象，所以可以和其他方法链接使用 .replaceWith()方法返回的jQuery对象引用的是替换前的节点，而不是通过replaceWith/replaceAll方法替换后的节点 DOM包裹wrap()方法wrap方法是指在改元素的基础上为其添加一个父元素 1&lt;p&gt;p元素&lt;/p&gt; 给p元素增加一个div包裹1$(&apos;p&apos;).wrap(&apos;&lt;div&gt;&lt;/div&gt;&apos;) 最后的结构123&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt; DOM包裹unwrap()方法作用与wrap方法是相反的。将匹配元素集合的父级元素删除，保留自身（和兄弟元素，如果存在）在原来的位置。 123&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt; 找到p元素，然后调用unwrap方法，这样只会删除父辈div元素了1$(&apos;p&apos;).unwrap(); 结果1&lt;p&gt;p元素&lt;/p&gt; DOM包裹wrapAll()方法.wrapAll( wrappingElement )：给集合中匹配的元素增加一个外面包裹HTML结构 12&lt;p&gt;p元素&lt;/p&gt;&lt;p&gt;p元素&lt;/p&gt; 给所有p元素增加一个div包裹 1$(&apos;p&apos;).wrapAll(&apos;&lt;div&gt;&lt;/div&gt;&apos;) 最后结果 1234&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt; .wrapAll( function ) ：一个回调函数，返回用于包裹匹配元素的 HTML 内容或 jQuery 对象。通过回调的方式可以单独处理每一个元素。 123$(&apos;p&apos;).wrapAll(function() &#123; return &apos;&lt;div&gt;&lt;div/&gt;&apos;;&#125;) 结果123456&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt;&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt; DOM包裹wrapInner()方法.wrapInner( wrappingElement )：给集合中匹配的元素的内部，增加包裹的HTML结构 12&lt;div&gt;p元素&lt;/div&gt;&lt;div&gt;p元素&lt;/div&gt; 给所有元素增加一个p包裹 1$(&apos;div&apos;).wrapInner(&apos;&lt;p&gt;&lt;/p&gt;&apos;) 最后的结构 123456&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt;&lt;div&gt; &lt;p&gt;p元素&lt;/p&gt;&lt;/div&gt; jQuery遍历jQuery遍历之children()方法查找合集里面的第一级子元素，children(selector) 方法是返回匹配元素集合中每个元素的所有子元素。 12345&lt;div class=&quot;div&quot;&gt; &lt;ul class=&quot;son&quot;&gt; &lt;li class=&quot;grandson&quot;&gt;1&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 代码如果是$(“div”).children()，那么意味着只能找到ul，因为div与ul是父子关系，li与div是祖辈关系，因此无法找到。 jQuery遍历之find()方法12345&lt;div class=&quot;div&quot;&gt; &lt;ul class=&quot;son&quot;&gt; &lt;li class=&quot;grandson&quot;&gt;1&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; children是父子关系查找，find是后代关系（包含父子关系） .find()方法要注意的知识点： find是遍历当前元素集合中每个元素的后代。只要符合，不管是儿子辈，孙子辈都可以。 与其他的树遍历方法不同，选择器表达式对于 .find() 是必需的参数。如果我们需要实现对所有后代元素的取回，可以传递通配选择器 ‘*’。 find只在后代中遍历，不包括自己。 选择器 context 是由 .find() 方法实现的；因此，$(‘.item-ii’).find(‘li’) 等价于 $(‘li’, ‘.item-ii’)(找到类名为item-ii的标签下的li标签)。 jQuery遍历之parents()方法快速查找合集里面的每一个元素的所有祖辈元素 12345&lt;div class=&quot;div&quot;&gt; &lt;ul class=&quot;son&quot;&gt; &lt;li class=&quot;grandson&quot;&gt;1&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 在li节点上找到祖 辈元素div， 这里可以用$(“li”).parents()方法 jQuery遍历之next()方法允许我们找遍元素集合中紧跟着这些元素的直接兄弟元素，并根据匹配的元素创建一个新的 jQuery 对象。 jQuery遍历之prev()方法取得一个包含匹配的元素集合中每一个元素紧邻的前一个同辈元素的元素集合 jQuery遍历之siblings()取得一个包含匹配的元素集合中每一个元素的同辈元素的元素集合 jQuery遍历之add()方法.add()的参数可以几乎接受任何的$()，包括一个jQuery选择器表达式，DOM元素，或HTML片段引用。 jQuery遍历之each() each是一个for循环的包装迭代器 each通过回调的方式处理，并且会有2个固定的实参，索引与元素 each回调方法中的this指向当前迭代的dom元 12345&lt;ul&gt; &lt;li&gt;ＡＡＡ&lt;/li&gt; &lt;li&gt;ＢＢＢ&lt;/li&gt; &lt;li&gt;ＣＣＣ&lt;/li&gt;&lt;/ul&gt; 开始迭代li，循环3次12345$(&quot;li&quot;).each(function(index, element) &#123; index 索引 0,1,2 element是对应的li节点 li,li,li this 指向的是li&#125;)]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js-dom操作]]></title>
    <url>%2F2018%2F04%2F04%2Fjs_DOM%2F</url>
    <content type="text"><![CDATA[DOM是文档对象化模型（Document Object Model）的简称。DOM Tree是指通过DOM将HTML页面进行解析，并生成的HTML tree树状结构和对应访问方法。 HTML DOM 模型被构造为对象的树 知识体系 改变HTML内容document.write();可用于直接向 HTML 输出流写内容。 绝对不要在文档加载完成之后使用 document.write()。这会覆盖该文档。 document.getElementById(id).innerHTML=new HTML 改变 HTML 元素的内容 123456&lt;h1 id=&quot;header&quot;&gt;Old Header&lt;/h1&gt;&lt;script&gt; var element=document.getElementById(&quot;header&quot;); element.innerHTML=&quot;New Header&quot;;&lt;/script&gt; 改变HTML属性document.getElementById(id).attribute=new value12345&lt;img id=&quot;image&quot; src=&quot;smiley.gif&quot;&gt;&lt;script&gt; document.getElementById(&quot;image&quot;).src=&quot;landscape.jpg&quot;;&lt;/script&gt; document.getElementById(id).attribute=new value 改变 HTML 元素的属性 1234567891011121314151617181920&lt;style&gt; .a&#123; width: 200px; height: 300px; background-color: bisque; &#125; .b&#123; width: 200px; height: 300px; background-color: black; &#125;&lt;/style&gt;&lt;div id=&quot;example&quot; class=&quot;a&quot;&gt;&lt;/div&gt;&lt;input type=&quot;button&quot; onclick=&quot;changeC()&quot; value=&quot;改变颜色&quot;&gt;&lt;script&gt; function changeC() &#123; document.getElementById(&quot;example&quot;).className = &quot;b&quot;; &#125;&lt;/script&gt; HTML DOM 改变 CSS 改变 HTML 元素的样式 document.getElementById(id).style.property=new style1234&lt;div id=&quot;example&quot; class=&quot;a&quot;&gt;&lt;/div&gt;&lt;script&gt; document.getElementById(&quot;example&quot;).style.color=&quot;blue&quot;;&lt;/script&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>DOM</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第十八章 ——《拖延心理学》]]></title>
    <url>%2F2018%2F03%2F20%2Ftuoyan18%2F</url>
    <content type="text"><![CDATA[聪明摆脱被动拖延的怪圈不管你本人是否也是一个拖延者，如果你跟一个总是延误事情的人一起生活或是工作，你很可能自己也会陷入挣扎之中，因为你陡然地想要激发拖延者的斗志，让他们才去行动，而结果只会让你更加沮丧。 相互挫败的怪圈 拖延者对他们所做的或所没有做的事情经常含含糊糊,让你以为事情进展比真实情况要好得多。这是一件令人气馁的事情，拖延者要么不想告诉你实情，要么不敢。这让你感到受骗上当或者被人出卖，这就使得你们的关系陷人紧张与冲突之中。 跟拖延者谈判 什么事不起作用的 1、说“只管做！”2、啰嗦与成为监工3、责备、嘲弄或者使用极端或夸张的后果加以威胁4、自己做5、说“我早就告诉你是这样的！” 起作用的态度 1、培养成长心态2、保持你的个人立场3、注意神经认知上的差异4、协作态度5、对自己的策略保持弹性6、记住什么是最重要的 特殊技巧 对父母的建议1、帮助你的孩子设定小目标2、帮助你的孩子识别时长3、设置清晰的限定和结果4、以相应的奖赏作为鼓励5、记住这是谁的事情6、尊重你孩子对于独立自主的需要7、无论什么时候在你孩子身上或你自己身上发现完美主义倾向，都要跟他作斗争8、谈论恐惧——你自己的，也包括你孩子的9、用好奇心而不是用判断来聆听孩子所告诉你的事情10、看一下是否存在某些潜在的且需要专业治疗的情况，这些情况包括：]]></content>
      <tags>
        <tag>阅读</tag>
        <tag>拖延心理学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第十七章 ——《拖延心理学》]]></title>
    <url>%2F2018%2F03%2F20%2Ftuoyan17%2F</url>
    <content type="text"><![CDATA[巧妙应对造成拖延的文化压力在文化转换的情况中，人们可能从一个国家搬到另一个国家，也可能从一个社会经济或教育阶层转变到另一个阶层，比如那些在他们的家族和社区中第一个考人大学的人，他们被看做“第一代大学生”。这些转变涉及复杂的心理、社会和情感经验，对一个人的适应性构成了多重的挑战。有些人在面临这个额外的压力和复杂环境的时候，采取了拖延和回避的方式来处理这些让他们苦恼或让他们无法承受的经验。 移民经验 虽说移民都有着丰富的人生阅历，但是他们有一个共同的经验，那就是远离故乡的经验。很多人正面临语言壁垒的考验; 所有人都要面对适应一个新文化的挑战，在这个新的文化环境中有着不同的社会规则，不同的家庭准则，不同的工作期许，和对时间和守时的不同观念。这些问题和你对他们的态度会对你发生拖延问题的可能性产生很大的影响。 文化转型的挑战 一些常见的跨文化忧伤的症状: 。无助感或强烈的思乡病。。产生了想要依靠同一个祖国或背景的其他人的愿望。。推迟或者拒绝学习新国家的语言。。为小小的挫折而大光其火。。过度担忧被骗、被抢或被伤害。。过度担忧身体健康、卫生或食品完全。。为诸如家庭价值观等文化上的差异而担心。。凝视空白处 克服拖延的一些建议 建立社会联系 社会联系对第一年的大学生活尤为重要，因为在这段时间内大学生掉队的风险更大。 发展你的“大学知识” 不要害怕求助你的导师，让他帮助你在大学的迷宫中找到自己的道路。你可以通过参加一些课程获得与校园内人们结交的机会一某些当你感到停滞不前、挫折、孤独或者在你陷人拖延怪圈的时候可以给你提供帮助的人。 有时候孤军奋战往往只会带来更多的失望。so，结交更多志同道合的朋友往往是更好地选择。 关注时间 不同的文化对待事件的态度也有着很大的不同，学习新文化环境下人们关于时间的规则、态度是很重要的一件事。 学会说和写当地语言 这是一项可以改变你的生活、为你的将来开启许多机会的努力， 坚持超越障碍 如果你发现自己有拖延问题，那你就把它看成是你需要关注自己焦虑的一个信号，从中学习它带给你的究竟是什么样的信息。]]></content>
      <tags>
        <tag>阅读</tag>
        <tag>拖延心理学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第十六章 ——《拖延心理学》]]></title>
    <url>%2F2018%2F03%2F20%2Ftuoyan16%2F</url>
    <content type="text"><![CDATA[对患有注意力缺失紊乱和执行功能障碍拖延着的一些建议在患有注意力缺失紊乱(ADD) 和执行功能障碍(ED) 的人群中，拖延是极为常见的一个问题。 ADD 和某些ED障碍基本上都是在约束控制方面出了问题，也就是说，你难以管控冲动和干扰，而这正是引起拖延问题的主要因素之一。要你停止被那些新奇的刺激一一观念、思绪、声音、感觉、冲动和他人，转移注意力是很难的。而这样的不专心使人很难去组织管理一件事，也很难坚持不懈地持续跟进，拖延也因此而滋生。要花一点力气才能将分散的注意力拉回来，让自己走上正轨。所以，很重要的一点就是要有策略地去减少干扰的数量，并提醒自己回到正在从事的事情。 从外在开始，逐渐转向内在 在我们学习一个新的行为模式和技巧的时候，典型的过程都是从很多外在支持开始的，随着我们将那个行为内化，外界的支持才渐渐消退，最后我们可以在没有外界指导或没有环境框架的情况下独立完成。 自我监督的能力是一项重要的执行功能。通过自我监督，我们才能有步骤地做事，帮助自己坚持目标，适应环境，调整情绪，并知晓自己表现的好坏。 执行提示点 你设立了一个很有意义有很现实的可操作目标，你的目标也很清晰，你也很想去实现它，但是你的工作记忆能力表现不是很好，当你在五分钟之后想要跨出你的第一步时，你完全忘记了自己想要做的是什么事情!或者，你已经准备好开始工作，但是某些出乎意料的事情抓住了你的眼球。或许你看到了一个有趣的杂志封面,或者你想起了某人曾经提到的一个书名，当你打开你的手提电脑的时候，你没有直奔自己的工作文档，而是去查询那本杂志或者书籍。 上面的这种情况对于我来说应该是经常发生的事了，当自己在敲代码的时候，遇到一个困难时，这时候是注意力最容易分散的时候，思考一会，就非常容易被周围的事情所影响，最后导致的结果就是问题没有得到解决，然而时间也不知不觉的过去了。 相关解决方法：1、视觉提示 出现在你身边环境的视觉提示会产生很好的效果。便条、图示、箭头、清单，任何你可以用来提示自己的东西都会起到很好的作用。 2、听觉提示 听觉提示的使用方法和视觉提示类似。如果你有一个智能手机或者一个有闹钟功能的手表，你可以用它们设定时间提示，提醒你采取下一个步骤的时间。 3、一个大活人 只要那个人了解你的需要和想法(专注和提示)，并且能够热心地提供帮助，那么一个活生生的人也是一个很棒的执行提示点。不管这个人是你的搭档、好友、同事、教练、治疗师，还是一个雇主，只要他让你感觉舒服和接受，那他就可以成为你的动力和专注的外在保障，他可以起到你自己无法起到的作用。 架构和线路的重要性 如果你患有ADD 或ED,每一个需要你做决定的点都可能让你从原来的道路上叉开。每一次你在决定该做什么的时候，你都可能被带向一个完全不同的方向或者陷在犹豫不决的泥泞中。不论哪种情况，你都已经不在正轨上，而这正是拖延趁机滋生的绝佳时机。 写一个清单 将你的想法和计划写下来，写在一个对你起作用的地方。一定要把这个清单放在一个显著的地方。这样你就不会错过。 在你的门前处放一个丢钥匙的篮子 当然并不是真的让你在门前处放一个丢钥匙的篮子，这句话的意思应该是处理好生活中的每一个细节，这样可以让我们以后的生活过得更为顺畅。 设定一个例行时间 每天或每周设定一个固定时间来料理日常的琐事。 保持短小 对ADD患者而言，短小要比冗长好，因为短小更加务实。 利用一分钟时间 在非常短的一小段时间内为你的目标做一点点事。 像一个服务生那样思考 保持行动，在你走动的时候做清理，在下一桌端上来之前，将脏碗碟清理干净。这是利用你快速运转的大脑的一种方法，它有助于你不被那些堆积起来的事情弄得晕头转向。 整理的足够好就行 对很多患有或者没有患有ADD 的拖延者而言，整理是一件让人头疼的事情。拖延者对整洁有着自己完美的标准，他们设想一个整理得完美有序的办公室，一个只要看一眼就让客人大加赞赏的家居，或者一个可以向邻居夸耀的无可挑剔的车库。这样的设想很快就会束缚你的手脚，因为你永远也不可能让你的办公室或家居弄得像你想象的那么美妙。 什么是你所擅长的 发现你的强项并追随它们。在你喜欢做的事情上或者在你的强项上更上一层楼，让你的生活充满让你快乐的人和事，跟你周围一个更大的世界联系在一起，用意义感和价值感来充实自己。]]></content>
      <tags>
        <tag>阅读</tag>
        <tag>拖延心理学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第十五章 ——《拖延心理学》]]></title>
    <url>%2F2018%2F03%2F20%2Ftuoyan15%2F</url>
    <content type="text"><![CDATA[作战方法C：利用你的身体减轻拖延我们在拖延的时候，不论我们是通过奔波忙碌来逃避一些事情，还是蜷缩成一个沙发土豆，我们实际上失去了跟我们最基础的自我(我们的生物层面) 的接触。花一些时间跟自己的感官体验相接触，培养自己良好的身体状态，这些都可以让你更勇于面对那些被你延后的事情。照顾好你的身体并不会一夜之间医治好你的拖延，但是却可以让你的身体和心灵更有平衡感，更稳定更轻松。当你的身心处于和谐的状态，你就准备得更为充分，随时去处理那些等着你去处理的事情。 通过运动启动你的状态 运动除了有利于身体健康之外，对提升我们的情绪也有很大的好处。假如一个抑郁的人可以让自己出去散个步,或者去一次健身房，他们一般都会比原来感觉好多了。运动会刺激身体产生一种叫做内啡肽的荷尔蒙，有助于提升愉悦感和幸福感。无论我们是否抑郁，只要不过量，运动对提升我们的精神都会有好处。 使用计程计 做一会运动 在运动的时候做一些你乐在其中的事情 跟一个朋友一起做运动 在处理一件棘手的事情之前·做运动 从小事做起 运动你的大脑’ 正念：主题及其变奏 正念(mindfulness) 指的是“在当下时刻对周遭环境不带判断地保持有意识的觉察”。这是一种观察自己的禅修方法，这修行方法已经具有超过2 500年的历史。它对拖延者特别有用，因为它所强调的重点就是在每一个时刻保持不判断的觉察。正念修行的整个要旨就在于轻柔、满足和滋养,正好可以对治自责的心态。修正念可以培养你慈悲地观察自己的能力，给予自己更多柔和的支持，而不是严厉的责备，你会体验到更多稳定、平衡和被接受的感觉，而不是忧心如焚的焦虑或负疚。 正念修行可以提高你的免疫功能，臧轻心血管疾病，降低压力反应。拖延者一直生活在这么多的身体和精神压力下，因此，作为一种减轻压力的方法，正念修行具有特别的价值。 以正念为基础减轻压力 神圣停顿法 心能调整技术 通过刻意地关注心脏，你可以调整心跳节奏。平顺而整齐的心跳节奏可以给你带来一种和谐、轻快和充满能量的感觉，这都跟积极情绪有关。]]></content>
      <tags>
        <tag>阅读</tag>
        <tag>拖延心理学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第十四章 ——《拖延心理学》]]></title>
    <url>%2F2018%2F03%2F20%2Ftuoyan14%2F</url>
    <content type="text"><![CDATA[作战方法B：学会接受和拒绝当我们不能直接拒绝的时候，我们可能会通过拖延来间接地拒绝。拖延还表示我们将窃取的时间用于我们不能公然接受的事情上。要做出接受什么和拒绝什么的决定有时候是一项很大的挑战。 与依靠拖延相反，我们觉得我们应该有意识地接受那些提高我们生活品质的事情，而拒绝那些对此无益的事情，并且应该直接地表达出来，而不应该通过拖延的方式来拒绝。 学会接受有益于你的人和事 接受来自他人的支持 拖延者通常对寻求他人的帮助怀着矛盾心理，一直等到最后一分钟还开不了口叫人帮忙，并对此感到羞愧，所以他们认为自己不值得被帮助。有些人坚信他们能够而且应该自己做所有事情，而感觉上去依靠他人就像一种失败。但是寻求帮助是利用你跟其他人的关系来帮助自己才去行动，并推动自己向前迈进。 几种接受他人支持的方式 1、选对人2、做一个公开承诺3、一起制定计划4、在你被困住的时候寻求帮助5、共同工作6、平行式做事法7、社交奖赏8、跟你所爱的人相处 接受个人成长的挑战 1、尝试新的挑战2、做更多你所热爱的事情 学会拒绝哪些没有意义的追求 对浪费时间和让你退步的人和事说不 什么是你想在生活减少或者消除的事情，什么又是你想要加人到生活中来的事情，这些都非常重要，值得你好好想一想。学会找出那些对你没有帮助或者并不十分重要的事情，并对它们说不。 1、对空洞性事物说不 空洞性事务是指相对你当前的自标和价值观而言最微不足道的那些事情。在时间管理中经常被引用的一个法则就是二八法则: 你20%的事务非常重要,并会产生最大的影响，你80%的事务不太重要，做不做对你并没有多大影响。这被称为“关键的事情不会多，微不足道的事情却很多”。 2、对不必要的事情说不 我们很容易被很多事情占据了我们的时间。拖延者往对事情有很高的期待，心怀伟大的理想，他们相信自己可以做好所有事情。但是被过度占据的情况给了他们一个借口不用去做每件事，或者什么也不做，不必要的事务侵占了我们放在重要事情上的时间。 3、对不适合你的人说不 随着你长大，你的父母或许曾经忠告你“明智地选择朋友”。很重要的一点是，要将时间花在那些能够对你坦诚相待、一起欢笑、相互信任、在困难的时候可以依靠的朋友。“明智地选择敌人”也很重要。你认识的有些人可能会使你的感觉更差，而不是更好。]]></content>
      <tags>
        <tag>阅读</tag>
        <tag>拖延心理学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第十三章 ——《拖延心理学》]]></title>
    <url>%2F2018%2F03%2F20%2Ftuoyan13%2F</url>
    <content type="text"><![CDATA[作战武器：明确的目标与可行性的计划拖延本身就包含难以达成目标的意思，拖延可以对你的生活造成严重的干扰，以至于你几乎很少能够完成你所设定的目标。或者,你最终终于完成了你的目标，但是其间经历了很多痛苦的挣扎。 可操作目标 一个具有可操作性的目标具有以下特征：1、可观察性 别人不能看到你的内心感受，也不了解你的想法，但是他们可以看到你所做的事情。为了让你的目标具有可观察性，你必须用行动来定义它。 2、具体性和特殊性 拖延者思考问题的方式往往比较模糊，无法做到具体化。当你达成目标的时候，你究竟做了什么? 你具体会在什么时候去做它? 还有谁会在那里? 3、他可以被分解成几个小的步骤 不管一个目标是大还是小，达成任何目标的唯一办法就是一步一步来，就像有一句谚语讲的:“脚踏实地一步一步来，生活就会一帆风顺。 4、第一步可以在五分钟内被完成 拖延着常常有一些不切实际的目标，因为他们想问题的时候往往过于理想化，好像他们的时间和经历都是无限的。 有些人可能不太情愿低头看脚下的路。那是完美主义在背后作祟! 你对任何低于你理想的事情都看不上眼。虽然选择一个最小目标对你的骄傲是一种打击，但是从小事着手最终会让你尝到甜头。你可以通过一小步一小步地实现你的目标而最终成就你自己，而不是相反: 光有空中楼阁，而没有实际行动。]]></content>
      <tags>
        <tag>阅读</tag>
        <tag>拖延心理学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第十二章 ——《拖延心理学》]]></title>
    <url>%2F2018%2F03%2F20%2Ftuoyan12%2F</url>
    <content type="text"><![CDATA[作战前传：拖延大盘点控制拖延的一个关键步骤就是对你的个人拖延方式进行清查。 盘点你内心的挣扎 写下你所记得的2~3 个自身的类似经历，其间发生了什么? 在事件中谁被牵扯了进来? 是什么诱发了你的拖延? 你的感受怎样? 最后的结果又是什么? 是否伤害到他人或者引起他人不便? 然后，你可以问自己在这些经历中是否存在着某些共同的主题或者模式，你一直恐惧的究竟是什么? 外在的与内在的后果 拖延必然会造成后果，会给你的生活带来许多不必要的麻烦，这些造成的后果就是外在的后果。拖延也会造成一些内在的后果，一个拖延着可以表现的很成功，有能力，油彩画。但是拖延的内在后果却让他背负重压，主键破坏一个人的自信和满足。 你今天的拖延 拖延的领域 某些人只是在某一个领域存在拖延，而在其他领域则表现正常。研究发现无论一个拖延者拖延所涉及的范围有多么广泛，但是这些拖延都是有选择性的。 仔细思量一下，在你推迟的事情和你能够准时做到的事情之间，最关键的区分在哪里? 你观察到了什么样的主题和模式? 你从中对你的拖延问题有了更多的了解吗? 你是推延细小的杂务呢，还是推迟对你最为重要的事情? 你是否只推迟为自己做的事情，而不会推迟为别人做事?你所推迟的事项是属于被人认为是你所擅长的领域呢，还是属于你没有经验的领域? 在你所推迟的事情中你是否觉察到任何恐惧或焦虑? 你拖延的风格 你在拖延的时候会做些什么？尽量多观察你的种种表现，从最典型的行为模式，到最不显眼的拖延策略，你都要加以注意。你还可以问自己一个问题，对你来说有哪些迹象表明你正在拖延。 拖延的借口 每个人都难免会疲劳、厌倦、丧失热情，或者太忙了。但是不管你的借口是什么，也不管你多么疲劳、多么没有热情或者多忙，你总可以花上15 分钟时间做一点事。记住: 那些不拖延的人也有碰到你所碰到的难处，但是他们觉得自己依然可以动手做事。克服你对开始做一件事的反感不是为了证明你自己(那样可能会产生其他弊端)，相反，它是伸展自己的一种方式。当你意识到一个借口的时候，你就有机会思考在拖延这个表面现象背后，你自己存在着哪些问题，你就会对自己有一个更好的理解。]]></content>
      <tags>
        <tag>阅读</tag>
        <tag>拖延心理学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第十一章 ——《拖延心理学》]]></title>
    <url>%2F2018%2F03%2F20%2Ftuoyan11%2F</url>
    <content type="text"><![CDATA[当人们观察到自己的所想所为，看清了他们内心的抵制，他们就会意识到,这样的机械反应是他们原有的心理模式在背后作祟的结果，而没有从当下的处境中做出直接的反应。另外，一旦人们找到那些抵制背后的心理原因,他们常常就不再那么疲于应付或者心生恐惧了，这对他们继续往前很有帮助。 改变是一个过程 做出改变和学会一种新的行为模式是一个渐进的过程。 改变发生的不同阶段：1、无意识无行动力或前改变2、有意识无行动力或醒悟3、有意识有行动或者决心改变4、无意识有行动 想要维护这个改变的过程，全心投入和反复实践是非常重要的，这样，随着时间的推移，有一天你会发现拖延变得不再对你有任何诱惑力，很多事情都可以马上动手去做。 找出拖延的因素 1、对成功所需的能力缺乏自信2、对要去完成的某个任务有反感心理：认定做事的过程中会遭遇很多困难，结局也会很惨3、目标和回报太遥远了，感受不到对我有什么意义4、无法自我约束，例如容易冲动和分心 如何运用这些技巧 1、一次尝试一个技巧2、慢慢来3、观察内心的抵抗4、使用笔记或者日记5、自由书写6、考虑心理治疗]]></content>
      <tags>
        <tag>阅读</tag>
        <tag>拖延心理学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第十章 ——《拖延心理学》]]></title>
    <url>%2F2018%2F03%2F20%2Ftuoyan10%2F</url>
    <content type="text"><![CDATA[拖延行为模式的法庭大调查从某种意义上讲,拖延把你服侍得很好。它保护你，不让你意识到自己不那么令人愉快的一面，还帮你躲避内心的烦恼和恐惧。在你不想采取会让自己内心不安的行动的时候，它给了你一个方便的理由让你心安理得。但是，不管你拖延的理由是什么，也不管它给了你什么样的安慰，你也为它付出了应有的代价。 改变所带来的威胁 如果你停止拖延，事情确实会发生改变，但是即便是往好的方向改变，你也会感到自己是站在一片不熟悉的危险地带。直到现在为止,不管你为之付出多少代价，拖延对你来说依然是一个躲避很多邪恶的避难所。你那个崭新的、不拖延的自我还处于未知之中，所以这对你是一种冒险之举。改变的最大挑战之一就是要去找到一个定义你自己的方法。 作为自我形象的拖延 可爱的小丑人们对待拖延的一种方式就是把它当做一个笑话，并在此基础上塑造自己的身份。他们可能将自己的拖延经历作为一种笑料。 圣人有些人会把照顾好别人作为自己的生活目标和价值，而对待自己的事情往往一拖再拖。这一切都是因为你感到自己被需要。 时时处处帮助别人的行为看上去情有可原，这使它成为一种具有欺骗性的拖延。当你选择为别人而不是为自己做事的时候，你似乎做了一个无私慷慨、值得赞扬的决定，但是，帮助他人而不照看好自己会让你失去自我的方向。 文艺复兴者有些拖延者创造了一个万事通的自我形象，他们想让自己的生活包容人类兴趣的方方面面，从政治、哲学、技术到身体锻炼和手工篮子编织，要了解每一件事情，你可要花费不少时间在上面! 他们忘了自己的工作，几个小时几个小时地沉迷于网络，同时追踪自己感兴趣的几个话题，还要从世界各地下载书籍，阅读报刊。 奇人拖延可以制造出最后关头大难临头的局面，有些人就喜欢扮演这些转危为安的英雄角色。 白板你或许对自己并不十分了解，也不知道自己想要些什么，而拖延可以帮你将这个事实隐藏起来。 拖延面具后面的人拖延挡住了你认识自我的道路。当你被拖延所占据，你就不能真正想明白哪些是你重要的事项。 去认识那个拖延之外的你是很重要的，那样你就可以按照自己的本来面目，而不是按照你所希望或者你认为的样子，来接受自己。这绝不是一件容易做到的事。它包括了诚实地了解自己，现实地评价自己，并最终接受你所发现的那个你。 面对现实 生物现实我们每个人天生都有一种独特的特质。学会接受你的生物现实并恰当的对待他，这点很重要，不要因为生物性因素而拖延。 情感现实要完全地接受自己就必须了解自己的情感并与之共处，不论这个情感是好是坏，是美好还是丑陋。去了解他们会让你的情商得到发展。 情感并不是那个在暗中跟你使坏、阻碍你如愿以偿的敌人。如果你对那些通常会导致拖延的比如犹豫、不适或焦虑之类的情感投以关注的目光，你就会获得一个更好地了解自己的机会，去发现在拖延背后更多的东西，从而采取措施改善自己的情绪状况。 价值现实 接受自己也意味着真实面对你的价值观。价值观所表示的是你生活中最为重要的态度问题。 有时候拖延反映了别人对你的期望跟你真正想要做的事情之间的差异。 拖延行为可能是对你正在从事某些违反伦理道德活动的一种警告。 有时候你的价值观和你所看重的事情跟那些讲这些价值观灌输给你的人是一致的。 整合 不管是出于刻板还是过于混乱，你都会在其中失去自发和自由，你的生命活力在这两种情况下都会失去本色，并且逐渐减弱。相反一个协调的自我系统却可以给生命力带来活力、和谐与平衡。这这样一个系统下，你就可以发展出一种弹性应变能力。 内心的检察官与辩护律师想要达到一种弹性应变的状态并不是一件容易的事。拖延着往往会对自己的感受与行为加以严厉而苛刻的评判。在这里我们需要常常做一些自我辩护的练习，做的越多，它在大脑中运转就会越发的自动，对维护大脑平衡起到的作用就越大，你也就会越来越自信。]]></content>
      <tags>
        <tag>阅读</tag>
        <tag>拖延心理学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第九章 ——《拖延心理学》]]></title>
    <url>%2F2018%2F03%2F20%2Ftuoyan09%2F</url>
    <content type="text"><![CDATA[你是怎样变成一个拖延着的你是怎样的一个拖延着，你独一无二的DNA、独一无二的大脑、与生俱来的先天气质、在一个特定时间降生在一个特定的家庭。先天条件加上后天培育共同催生了现在的你。 如果父母对孩子的羞怯给以关爱，让他们在探索世界的时候获得安全的心理依靠和爱的支持，那么这些孩子将随着时间的推移会逐渐克服他们的羞怯倾向，更能够热情地涉人到世事中去。而没有受到父母关爱的孩子会一直将这种羞怯的焦虑心理延伸到今后的生活中。如果你先天的特性跟你后天被对待的方式之间没有被很好地协调的话，你很难为自己建立起坚实的自信，而缺乏自信是导致拖延的一个主要因素。 成功和失败的榜样 谁是你“成功”的榜样? 他们身上的什么东西让你觉得他们是成功的? 他们是什么样的人? 别人是怎样看他们的? 他们是怎样对待你的?他们又是怎样对待自己的? 你是怎样将他们内化到你心里的? 再想想谁又是你“失败”的榜样? 他们身上的什么东西让你觉得他们是失败的? 他们是怎样对待别人，对待自己的? 他们对你产生了怎样的影响? 你或许会认为成功的唯一途径就是跟你的成功的榜样做的一模一样，而不允许自己跟他有丝毫不同。你或许倾慕父母或者朋友身上的某一个品质，过高地评价这种品质，并且把它理想化，这使你无法十分真切地看清楚你的榜样，从而容易让你在与他的盲目比较中贬低自己。一个被理想化的成功榜样是无法付诸实践的! 我们想提醒你: 你所倾慕的对象身上也存在着某些你可能不喜欢的品质和特点; 你将他们理想化之后就无法看清他们的局限，而将自己卡在低人一等的位置上。你很可能觉得通过拖延你就可以避免面对这样的状况。 家庭态度：拖延的成因 家庭对我们的影响是很深的，甚至到我们成人后，它们依然在影响着我们，而通常我们不会意识到这些影响的存在。早年家庭关系的某些方面甚至被永久性地嵌人了你的大脑，因为这些家庭互动创造了新的神经通路，而一旦这些通路被建立，它们就稳固下来了。神经科学家指出:“人脑对未来的期待是以过去所习得的东西作为参照的。”你是通过过去的经验来感知未来的。 当那些我们从家庭中学到的观念和规矩不知不觉控制了我们的思想、情感和行为的时候，我们就会遇到麻烦，尤其是某些限制我们能力与创造力发展的规矩，对我们的祸害更大，因为这些观念和规矩没有经受过仔细的检查，就偷偷溜进了你的大脑。这就像不管什么东西放到你的盘子里，你都要吃了它们，不考虑是否喜欢，也不考虑是否有益，甚至也不问是否饥饿! 你就是张开嘴把它们吞下去，而这会引起精神性消化不良。 家庭倾向 五个基本的家庭倾向和与之相随的内心恐惧是形成拖延的心理原因。五个基本的家庭倾向分别是：施压、怀疑、控制、依附和疏远。 施压倾向 在一以个人成就为取向的家庭中，施压倾向是很明显的。这样的压力会成为一种沉重的负担，从而造成一个人的适应不良，导致完美主义和拖延症。在一项大学生的调查研究中，适应不良性完美主义者跟父母的高期待和苛刻要求关系密切，这些学生对怎样满足他人的期待往往显得过分操心。 怀疑倾向 当怀疑倾向在家庭中占据主导的时候，它所传递的信息是：“你不具备哪些必备的条件”。 无论是采用退缩的办法还是采用挑衅的办法，如果你已经将怀疑内化到了心中，那么当你在面对挑战的时候，你多半会丧失勇气。拖延对你来说就成了一个安全的港湾，因为它可以保护你，让你不必去测试那个你所唯恐的真相: 你没有能力做它。 来自不断表达怀疑态度家庭的拖延者往往会认为: 无论大小，任何失败都意味着所有的怀疑都是真实的。他们忽略了一点:一次两次失败，哪怕是一百次失败，都不会让人永久性地变成一个坏的、不值得爱的或者无能的人。 控制倾向 当某个人总是主宰你的生活的时候，你或许会在拖延中找到安慰。通过拖延和拒绝做事情，你可以激怒有控制欲或者要求严格的父母，并削弱他们对你的掌控。虽然从长远来看，拖延并不是对你最有利，但是这种消极的抵抗相比直接公然的反抗而言，是一种更为安全的做法。拖延甚至有助于你保留自己的某些独立感，对你而言，这比成绩或表扬要更重要。有时候，拖延是一种让心灵存活下去的策略。 依附倾向 依附倾向家庭不鼓励家庭成员去创造他们自己的生活，而是提倡依附和牵绊。这样的家庭所想传递的信息是：你不能独立思考，你也不能离开我们而存活。 疏远倾向 在有些家庭中，家庭成员之间缺乏身体爱抚和情感关联，没有共同的兴趣，也没有受保护的感觉，疏远倾向在这样的家庭中是很突出的。 家庭对自尊的影响 家庭或许对孩子的影响是最大的。孩子的恐惧是对孩子自尊心发展的抑制。个人成长中的一个使命就是要发展出对你自己能力的合理认知，并接受自己的局限性，同时又能维护一个积极的自我价值感。 破裂与修补 要做好一个父母，不是每件事都要与孩子有呼应，研究人员发现，父母只要在30%的时间内对孩子有呼应就会养成孩子与父母间牢固的情感依赖。]]></content>
      <tags>
        <tag>阅读</tag>
        <tag>拖延心理学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第八章 ——《拖延心理学》]]></title>
    <url>%2F2018%2F03%2F20%2Ftuoyan08%2F</url>
    <content type="text"><![CDATA[如何打造大脑的全局领导力 执行功能障碍 个有执行功能障碍的人常常会有拖延的问题，但是，不是所有的拖延者都会有执行功能障碍，所以，你必须仔细考虑一下自己的拖延症是否跟执行功能障碍有关。几乎所有注意力缺失紊乱症(我们会在下一个部分讨论这个问题) 患者都会有执行功能障碍上的问题，但是执行功能障碍并不一定伴随注意力缺失紊乱(简称ADD)。 注意力缺失紊乱 注意力缺失紊乱症(ADD) 以及它的各种变型，注意力缺失多动紊乱症(ADHD) 和不专注型注意力缺失紊乱症(ADD of the inattentivetype)。 ADD具有三个核心的症状: 注意力分散、冲动和躁动不安。它所指的并不是我们每个人时不时都会经验到的那种注意力分散，而是指不能专注、融入或者记住，哪怕他有这样的意愿。 抑制是大脑的一项主要功能，一个不能有效抑制自己的人会成为冲动的牺牲品。正是因为我们能够抑制自己即时的反应，我们才能跨过一个难关，延迟某些满足(还有什么其他能够让自己从中学或者大学毕业的好办法呢?)，也才能控制住自己的性冲动和暴力倾向。也正是这种抑制能力才让我们感觉到自己能够自由抉择一对即时的刺激，我们可以不去理会它。 抑制也跟时间感密切相关。当你想起将来某些重要的事情时，当你明白现在的所作所为与将来的结果紧密相关时，你就更能够抑制住自己满足当下欲望的冲动。研究表明，ADD患者不能够像普通人那样恰当地感知时间。就主观感受而言，他们的时间过得要比别人慢，做成一件事情要比他们预期的花费更多时间，他们很快就会感到挫败和不耐烦。 与其将ADD看成是大脑受了损伤，品行出了问题，性格有缺陷，不如将它看成是在基因、生物学和环境这些复杂因素的共同作用下形成的一个问题。如果你患有ADD,那么你会有一个与常人的运作方式不同的大脑，那么相对而言你就更有可能会得拖延症。 抑郁症：倾向与变种 抑郁症有很多不同的种类，可以从严重程度来分类(比如，典型抑郁、轻微抑郁、慢性抑郁以及心情不佳)，还可以从反复的周期性加以区分(比如，双相抑郁、季节性紊乱抑郁以及由荷尔蒙分泌上的变化导致的抑郁)。它们共同的特点是: 当你抑郁时，你会感到能量不足，不愿意参与，失去兴趣，没有目标，不再乐观。如果你处于悲惨的心境中，对生活感到无望，也不再关心自己究竟活得怎样，那么，你很可能就不会再去关心自己的工作或学业，也不再关心是否能跟朋友待在一起，对处理税收事务或者照顾好自己的身体都变得毫无兴致。如果你抑郁了，你很可能会在很多重要的事情上拖沓不前。 抑郁症的背后有生物性、心理和环境三个因素在起作用。有一些处境可能会触发抑郁症，例如，一次重大的损失、在人际关系上的困境，或者类似搬家、孩子离开家人或者退休这样的重大人生转折。为失去什么而痛苦，或者有时候感到悲哀或空虚，这些都是正常的，但是正常的痛苦不会带有对自己的憎恨或者对世界和将来的悲观，自我憎恨和悲观都是抑郁症的表现。 重度抑郁症的最佳治疗方法是将药物疗法和谈话疗法结合起来进行治疗，而且，抑郁症越严重，就越需要药物疗法和谈话疗法的双管齐下。 焦虑症 强迫症 强迫症(简称OCD) 也是拖延症背后的一个原因: 患有强迫症的人在做一件事之前会不停地排列其好处和坏处,或者不断地检查炉子是否被关掉，所以他们往往什么事情也做不成。他们的思想和行为不断地重演是因为他们的大脑陷人了一个无法停止的程序中。 邋遢分子和囤积狂 压力对人的影响 大部分拖延者都知道，不断将事情往后拖会令人处于高度的压力之中: 你为该做而没有做的事情不断担忧着; 当你为了赶上最后期限而终于上手做事的时候，那种最后关头的紧张会不断加重你的压力。慢性拖延也意味着慢性压力，而这对你的大脑和身体是有害无益的。 当我们处于慢性压力之下，我们的身体就会不断地产生压力荷尔蒙，长期而言，压力荷尔蒙会破坏我们大脑的某些重要结构。这些大脑结构被破坏得越严重，我们脑细胞的修复能力和刺激新神经生长的能力就越差。]]></content>
      <tags>
        <tag>阅读</tag>
        <tag>拖延心理学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第七章 ——《拖延心理学》]]></title>
    <url>%2F2018%2F03%2F20%2Ftuoyan07%2F</url>
    <content type="text"><![CDATA[世界上存在拖延基因吗 大观念之一：你的大脑处在不断的变化中 科学家们过去认为我们的大脑是以一种可预测的、预先设定的方式发展的: 它的某些属性属于与生俱来的“硬件”，然后它经过了儿童期的成长，在18 岁的时候达到了它的顶峰，再往后它就开始走下坡路了。如今这些看法已经被很明确地否定了。研究显示，你的大脑是一个活生生的动力系统，它在不断变化，也在不断修正。大脑具有一种重组能力，它可以打破旧的神经联系，建立新的神经联系，我们把这种能力称做“神经可塑性”。现在我们知道大脑每天都在发生变化: 你今天做的事情，无论好坏都会影响到你大脑明天的结构和功能。 大脑始终在变，说它是个好消息，是因为它能激发人新的灵活的行为。说它是个坏消息，是因为它也能强化旧的顽固的行为，这被称为为“可塑性悖论”。 只有让自己的意识保持在高度觉察的状态，才能介入到旧习惯中，打破其不断重复的神经元连接。 大观念之二：感受很重要，即便它处于无意识中 你的感受连接着你独一无二的自我一只有你自己才能体验到你的感受,而感受是意识的一个重要组成部分。你的感受对你本人意义重大，你可以运用你的感受来引导自己，你也可以通过倾听自己的感受来做决定。研究人员了解到,本能反应和直觉是智慧的一个反映。如果你大脑的某个部分(额叶) 受到损害，你就失去了运用情感来做出聪明选择的能力。如果你跟自己的感受失去了有效联系，你就无法利用这个自我认知的源泉来帮助你穿越人生的种种障碍。 为了不再拖延，你将不得不忍受某些不舒服的感受，比如恐惧和焦虑。不顾恐惧而继续向前需要加倍的勇气，因为恐惧是被瞬间触发的，它就一直在那里，它还会给大脑发送强烈的难以抵挡的信号。一旦在体内运行，恐惧触发起来非常迅速，迅速到你难以想象的程度。 我们如何才能不依靠自我挫败的心理防卫机制而对危险做出应有的反应呢? 我们可以着力于培养一种情绪调整能力,这样我们就会对自己感到舒服和自信。 大观念之三：潜伏记忆的影响 潜伏记忆有时候也被称作“早期”记忆，因为它们通常在3 岁之前就埋藏在你的大脑中，那个时候负责记忆储存的大脑海马体还没有得到较为充分的发展。 从出生到18 个月大，大脑的右半球占据主导地位，右半球是以一种直觉的方式来感知这个世界的，在这段时间里，它获得了迅速的成长。右半球具有对语言韵律的感应能力，所谓语言的韵律，指比如语调以及节奏，而不是指内容，这也就的是讲话中的非言词部分，解释了为什么摇篮曲对一个婴儿具有那么大的抚慰作用。 从18 个月到3岁，与语言习得的奇迹相伴随的是大脑左半球的快速成长，相对而言，左半球更为强调逻辑、分析，以一种线性的思维方式去把握世界，它可以用词语和思想来组织说辞。然而，在这段时期，大脑的海马体还没有发展成熟，所以所有这些早期岁月的经验都留在你的潜伏记忆中，在你的余生，它们经常会从无意识中被激活。 潜伏记忆不能被直接地看到，但是从你对自己和其他人的期望中，你可以找到它的踪影。这些记忆塑造了我们的感知，它们是建立在我们的早期经验基础上的一我们是怎样被人看护的，那是一种我们看待自己和世界的独特感受,也是一种我们可以期待什么和不可以期待什么的假设。 大观念之四：联结的通路 研究显示，低自尊也是拖延症的一大原因。你的自我形象——你是否对自己实现成功的能力有信心。 大观念之五：左逆转 越来越多的证据说明大脑左半球的某一个部分(左额叶) 是跟关照、感应和同情这样的感情有关的。当这个区域被激活，我们就会感到放松,对世界怀着开放的心态。相反，在一种不舒服的、负面的情绪中，我们就会倾向于撤退到自己的世界中。 当你着手做一件难事，你的大脑依然会显示出恐惧的迹象，你马上会感到一阵焦虑向你袭来。就是在这个时候，你能够以一种新的方式应对这种反应，你可以用鼓励而不批评、同情而不攻击的态度来对待自己。一个友善的声音会给你足够的安全感去走进这个不舒服的情感地带。随着时间推移，通过练习(或许加上几片优质的巧克力),你就会发展出跟以前不同的自我关系。当你的思想富有同情心，你的身体会反应良好，你整个的自我也会以更加完整而协调的方式进人良性的运转。]]></content>
      <tags>
        <tag>阅读</tag>
        <tag>拖延心理学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第六章 ——《拖延心理学》]]></title>
    <url>%2F2018%2F03%2F20%2Ftuoyan06%2F</url>
    <content type="text"><![CDATA[拖延时钟：你知道现在几点吗 主观时间与客观时间 我们对时间的流逝都有自己独特的感觉，而这是不可量化的，也无从比较，这就是“主观时间”，它是我们对于钟表之外的时间的经验。有时候我们感到时间过得很快; 还有一些时候，时间又慢得像蜗牛爬。当你在做自己喜欢的事情时，无论是在互联网上冲浪还是在装饰你的爱车，或者赖床不起，时间都过得令人无法置信的快。但是当你在焦急地等待一个回电，或者在做一项你不喜欢的任务时，一分钟感觉上去就像一个小时那么长。 对时间有一个独特的主观感受可以使你对自已更具有一种独一无二感,这为你的内在时钟和你的生物节奏留出了空间，并对你在芸芸众生中寻找自我感觉极为重要。主观时间会帮助你摆脱那种依循季节周期变化而形成的线性时间观。与那种被钟表时间束缚着的感觉不同，在主观时间留出的弹性空间中，你可以更自由地呼吸。 很多拖延者生活在主观时间和客观时间的严重冲突中，不愿意也不能认知到它们的时间概念与钟表时间有着很大的差异。与那些能够在主观时间和客观时间之间自由而流畅地出人的人不同，他们一直在其间挣扎。有些人把钟表时间看成无关紧要的，认为它不够人性。有些人则始终处于时间混乱中，一开始似乎一切进展顺利，但是因为突然之间发现时间不够而晕头转向，而这样的经历只会在他们身上一再重演。 对于时间的主观感受是构成自我认同感不可或缺的一个组成部分，实际上它跟你的文化和家庭背景、你的生物遗传以及你的个人心理都息息相关。 拒绝接受钟表时间、坚持遵行自己的主观时间会让你与周围的人格格不入，也因而造成了你的拖延和延迟。按照自己的时间表以自己的方式做事情，感觉可以不顾后果而掌控时间，这样做势必会造成拖延，而拖延的其中一个功能就是给了你一种全知全能的幻觉: 你可以掌控时间、掌控他人、掌控现实。但是不管你喜不喜欢，你无法超越时间的规则，也无法避免丧失与限制，更无法抵挡变化和死亡。 时间感的演化 婴儿时间 对于一个婴儿来说，生活完全处于当下这个时刻，时间完全是主观的不管时钟上的时间是几点，“我现在饿了”，对于一个婴儿来说，时间意味着从感觉到某种需要满足这种需要之间的间隔。 幼儿时间 在蹒跚学步阶段，孩子们逐渐学会了什么事过去、现在和将来。虽然他们现在非常饥饿，但是他们会在几分钟内就有好吃的。孩子可能会将时钟看成是一个想要控制他的敌人，或者是一个可靠而安全的伙伴。 儿童时间 大约7 岁的时候，孩子开始知道怎么叙述时间，他们认得出时钟上各数字之间的关系表示的是一段时间的间隔。他们同时也与外界更多的规则和期待发生冲突。老师有课程表，作业有上交的最后期限，父母希望孩子在出去跟伙伴们玩耍之前整理好自己的房间并帮忙做一点家务。 少年时间 青春期的开始标志着一个人时间感的戏剧性转变。他们看到了时间流逝的铁证，一个长大了的十几岁少年跟一个儿童的身体有着显著的不同，并且是不可逆转的。这些青少年时期的变化将童年湮没了; 敏感的身体和热情的理想占据了一切; 未来在他们面前展现出一幕宏大的场景,让他们感觉生命是无限的。然而，随着学业、工作以及人际关系上的选择日益逼近，所有这些截止日期以及必须做出的抉择又让未来在现实面前撞得粉碎。 青年时间 在你二十几岁的中后期，虽然时间继续长长地延伸到未来，感觉上非常充裕，但是它现在已经变得更具有现实感了。他们会认识到他们可能没有足够的时间去完成每一件事情，有些机会可能会错过，在这个阶段，为了检验他们跟时间的关系,可以看一看拖延在他们生活中扮演的角色。拖延现在不再是朋友之间的一个笑话，也不再是以后你可以弥补的某件事情。它的后果越来越严重: 工作中的最后期限跟你的职业生涯与收人密切相关，如果你建立了一个长期的亲密关系,拖延也会影响到他人。 中年时间 30 岁是一个重大的分水岭。过了30,你不再是一个怀着许多未来梦想的年轻人了; 你被期待着在自己的潜能上有所表现! 在30 以后的中年人生中，当你在事业或感情中表现拖沓的时候，这或许表示你的事业或感情出现了问题。拖延者难以接受人生的限制，当他们发现他们一直以为会在某一天实现的目标在人到中年时依然没有实现的时候，他们震惊了。有些拖延者在中年期一直在跟抑郁做着抗争，因为那时一切都尘埃落定了，例如，他们将不会有孩子了，他们的癌症找不到治愈办法了， 老年时间 当我们越来越老，我们更无法否认时间正在日益耗尽。从成年到老年的过程中，我们被越来越多的丧失与死亡所包围: 某些身体功能的丧失; 疾病越来越严重; 挚爱的人离开了人世; 剩下来可以活着的时间越来越短。未来也不再像早年那样充满了希望和前景。钟表时间可能已经不再重要，而主观时间显得更为重要了。 对于一个跟生命的有限性作者抗争的拖延着而言，接受生命无可避免的终结是一项具有重要心理意义的挑战。 陷在另一个时间区域 带着他们跟时间的独特关系，拖延着对于时间的感知与他们所处的人生阶段不相符合。当你的时间阶段跟你的人生阶段不能吻合的时候，你的拖延会将你拖到一大堆麻烦中。 时间迷失 不受时间限制的主观感觉所产生的后果既是积极的又是消极的。不受时间限制的感觉往往发生在当你处于深深的愉悦或者玩得最开心的时候，富有创造性的时刻仿佛也是发生在时间之外。但是如果时间迷失成了你的生活方式，那就可能会产生严重的后果。无法分清有限和无限，会让你在根本上失去方向感。 时间断裂 不受时间限制的感觉让我们对过去、现在和未来之间的联系失去了辨别能力。为了改变这样的状况，你首先得接受组成你生活的那些经验。接着，你得接受负责做出改变的正是原来的那个你。奇怪的是，当你接受了原来的那个你，从自己真正所站的位置开始做起，你就更有可能成就一个崭新的自己。]]></content>
      <tags>
        <tag>阅读</tag>
        <tag>拖延心理学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第五章 ——《拖延心理学》]]></title>
    <url>%2F2018%2F03%2F20%2Ftuoyan05%2F</url>
    <content type="text"><![CDATA[心理舒适区：对亲近与疏远的恐惧拖延除了能够保护一个人免于遭受他人评断，免于陷人与人抗争之外，还能够调节跟其他人的亲疏关系。维护一定的人际距离，无论亲疏如何，对一个人心理上的安全感和舒适感而言都是至关重要的。 离开自己的心理舒适区，跟人太亲近或者太疏远，会让他们感到不舒服，他们会不遗余力地想要回到让自己舒适的区域，拖延就成了维护他们心理平衡的一种策略。 对疏远的恐惧：我绝不独自行走 当人们对自已的独立自主性持犹疑态度的时候，他们往往会采取这些方式来运用拖延策略。 需要帮助 如果你对自己以及自己的想法不够确信，甚至对能否拥有自己的想法表示心存疑虑，那么在不寻求他人帮助的情况下你很可能无法采取行动。这里的帮助并非指让别人提供意见或者相互进行脑力激荡之类的帮助，而是指需要别人给你提供某个观念或者架构，以便你可以将它作为自己行动指南的那种帮助。 努力成为第二 在有别人为你出头露面的情况下，有些人可能会对自己身处副职颇为自得其乐。他们会避免那些会将他们逼到第一把手位置的事情，因为他们害怕那样会使他们跟人太疏远。 S.O.S 紧急呼救 有一些拖延者喜欢给自己挖坑，让自己陷人种种麻烦之中，他们希望别人会过来把他们从中拉出来。拖延是他们使用的一个办法，好让自己陷人可怜和绝望的境地，这样就一定会有人来拯救他们。而对一个拖延者最终的拯救就是让别人帮他把活都干了。 重温旧情 不管拖廷对你发挥着什么样的作用，它始终可以帮你保持你原有的生活方式，并让你恢复与其他人的关系，它缓和了你的孤独感。在这样一种拖延的模式中，你可以让过去重现在现实的生活中。 忠实的伙伴 当你处于拖延带给你的痛苦之中，面对没有完成的任务、没有做出的决定和没有支付的账单，不论你到哪里，你可能都背负着拖延的债务。假如你确实拥有一些摆脱重负的美好时光，只要想起自己那些未尽的职责，你的美好时光就会转瞬即逝。虽然拖延始终是一个负担，但是它也可以是你生活中忠实的伙伴，它会提醒你所有必须去做的事情 恐惧亲近：关系太近让人不舒服 害怕疏远的人都是通过与人保持亲近的关系来获得巨大的安全感。而害怕亲近的人则刚好相反与人保持距离会然他们感到更加自在。 得寸进尺 有些人相信人际关系会把他们消耗殆尽，他们害怕比人会永不满足，要求越来越多，知道他们完全枯竭为止。 不想重蹈覆辙 有些人避免在人际关系中涉入太深，因为他们决心不让自己冒重蹈覆辙的险。 内心的狼人 有些人会担心自己在亲密关系的压力下变成一个什么样的人，他们担心在化身博士的面具下掩藏着一个海德先生。 不去爱胜于失去爱 那些躲避亲密关系的人可能会刻意不让自己知道自己是多么渴望亲近。如果他们允许自己发展一段亲近的关系，他们就会发现实际上他们真正的情感需求是如此的强烈，很可能会无意中打开自己的一个潘多拉盒子。他们会发现自己对亲密感情的渴望就如排山倒海一般无法阻挡。]]></content>
      <tags>
        <tag>阅读</tag>
        <tag>拖延心理学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第四章 ——《拖延心理学》]]></title>
    <url>%2F2018%2F03%2F20%2Ftuoyan04%2F</url>
    <content type="text"><![CDATA[挣扎中的拖延着：成为战败者怎么办 争夺控制权的较量 对我们每个人来说，对自己的生活具有一定的掌控感是十分重要的一件事,但是同样重要的是,我们也必须学会去遵守那些不是我们自己所制定的规则,并顺应别人的需要。然而，那些对掌控感十分敏感的人或许不喜欢任何规则，他们会抗拒任何他人对自己的要求; 对他们中的有些人而言，拖延成了他们获取掌控感的一种方式。 规则是以某种外在力量加诸于我们身上的限制或者期待的形式出现的。如果你感到遵守规则让你显得无足轻重，那么你就会感到必须打破它。 还有一些规则来自于你生活中最重要的人物的一些信条，这些信条已经被你内化到了自己的心中去了。这些“活得规则”在他们建立之后发挥着长久的影响力，甚至在他们并没有什么实际作用的时候依然在影响着你，他们成了你拖延的一个战场。 个体独立性的问题 拖延常常是一个人的独立宣言，一个人试图通过“我是一个拥有自主权的人。我根据自己的选择来行拖延来告诉人们:动。我没有必要按照你的规定或者要求来做事。”利用拖延来抵制被人控制的人可能是想保有他们独立的个体感，他们必须确信他们是按照自己的方式在生活。 拖延者仍然以表现来衡量自我价值感,但是在这里的“表现”是“不表现”，也就是说，通过拖延，通过不作为，自我价值感得到了加强。与其说“不作为”是回避检验自己的能力，不如说是拖延者能力的直接证明。区别在于对“能力”的定义。对害怕被人评判的人而言，“能力”指的是他们在一个指定的任务中做得多出色。对那些害怕在拖延之战中失败的人而言，“能力”指的是在与限制他们独立性的企图作斗争方面能做得多好。 拖延不仅仅是为争夺控制权而战，也是为自我价值感和自我尊重而战，我们会明白为什么在这样的争战中会激起这么强烈的恐惧，为什么这些拖延者会如此顽固地不愿意改变。如果你的自我价值感是建立在不让别人左右你的能力上，那么每一次跟人打交道都会让你如临大敌。一次小小的挫败就会让你觉得自己做了某种妥协，而你作为独立个体的身份感也会处于动摇之中。生活也因此成了一个战场，你在其中跟每一个规则开战，为每一件事情争执，或者不论大小场合都要求别人对你特殊对待。在你大脑深处，你或许一直在评估谁更强势，谁处于控制地位，谁占上风。你随时都准备好反抗权威，在事态中施加自己的影响力。 秘密的战斗 当对独立性的需要成为一个人生活中的压倒性倾向时，他做抉择的过程就会变得非常困难,要让他决定投身于某种关系或者某项工作也是一件让他左右为难的事情。对害怕在争战中败下阵来的拖延者而言,把自己所想所感暴露给别人看会让他们感到自己极为脆弱。他们关注的不是一旦暴露就有人来评判他，而是他们的权力会被解除，他们的弱点会被追究。在秘密中战斗似乎要安全多了。 在抉择和承诺中拖延是保护你自己的一种间接方式，因为别人对你的立场不清楚，就无法限制你。然而，一旦你做出了抉择或者承诺，你或许会感到自己中了圈袋或者被暴露在众目睽睽之下。你那基于不可知和无从捉摸的安全感就会消失。你唯一的保护看来就是免于做出任何大你就可以在别人一有任何控制你企图的时候就转小的承诺。那样的话，而投身别的事情，你随时随地都可以躲避。 防卫的哲学 不论拖廷是被用来对付小的冲突，还是被用来跟别人作全面对抗，这些人只关心战斗胜败，他们似乎对这个世界以及他们影响这个世界的能力有几个基本的假设。 世界不可预知 对随时备战的拖延者而言，到处都掩藏著不确定。你水远不会知道某人会鼓励、支持你，还是企图控制、操纵你。与其让自己相信最好的结果，不如为最坏的做好打算，这样更有安全感。因为你不能预知自己会被帮助还是伤害，所以这个世界不仅是不可预知的，而且是危险的。 他若强势，我必软弱 那些通过拖延发动争战的人常常会在一个强势的人面前感到自己的软弱。但是如果你将他人的力量不假思索地诠释成自己的软弱，那么你无疑在自己的头脑中夸大了对方的力量。你把对方看成个控制你生活的人，是他叫你该做什么，以及什么时候去做。 合作相当于投降 对于有些人来说，光是提到合作这个词就足以让你产生一种屈服感，为自己可能放弃的权利而感到恐惧。配合别人的规矩，答应别人要求你做的事，这些都让你感到自己在向对方投降。但是你忽视了：处于你本人的意愿，你也可以选择遵从对方，或者为了达成一个你所追寻的目标，合作是必需的。 争战的根源 很多对被控制比较敏感的拖延者都是成长在一个不鼓励自主把握生活的环境中。这些孩子可能从小被严格地管束，个人习惯被过度干预，他人强烈的好奇心让他们感到受到侵犯，不断的批评让他们失去自信，太多的限制压制了他们的自发性和创造性了他们通向独立的道路。很多这样的抗争是回忆所不能及的，因为在很早的时候他们就开始为饮食、睡眠和自由探索而不断抗争。 对父母来说，为了支持孩子的自我发展，同时也为了给他们一定的指引和限制，有必要在孩子的自立倾向与父母对孩子的期许之间取得平但这始终是一项具有挑战性的工作。有些父母不能从孩子迈向自立衡，的步伐中享受到乐趣，对一些受过骨肉分离痛苦的父母和一些控制欲很强的父母来说，尤其如此。]]></content>
      <tags>
        <tag>阅读</tag>
        <tag>拖延心理学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第三章 ——《拖延心理学》]]></title>
    <url>%2F2018%2F03%2F20%2Ftuoyan03%2F</url>
    <content type="text"><![CDATA[对话拖延：拖延你好，成功再见我们每个人都必须给出自己对“成功”的定义。对有些人而言，成功是以社会地位、收入稳定性或者个人影响力来衡量的。对另一些人而言，成功更多地意味着人与人关系上的收获，比如一种有爱的关系或者一个快乐的家庭。成功或许给你带来一种满足感。 如果把成功定义为“及时追随目标”。从这个定义来看，不论什么时候，只要我们在做自己想做的事情，就会感到自己是成功的。“及时追随目标”会将你渐渐引向其他定义的成功，同时，它也可以让你在付出努力的时候能感受到成功。然而，一个拖延者却不能及时地追随自己的目标，所以每当他们再次让自己失望的时候他们都感到失败。不过，如果他们能够将自己的心态调整到成长心态，欣赏自己的努力和提升，那么他们将会发现，在“及时追随目标”这一点上比以前做得更好本身就是成功。拖延者即便到达成功，也不能充分享受其喜悦。因为成功的喜悦早已被心急火燎、通宵达且的最后冲刺冲得无影无踪。虽然没有其他人知道他们的成功只不过是赶出来的，但是他们自己知道一一对他们来说，这意味着他们仍然没有真正成功。他们责备自己没有成功,并希望从拖延的锁链中解脱，但是在自责中经常会错过一个重要的问题: 他们实际上很可能是在恐惧成功，并利用拖延来避免成功的到来。 你恐惧成功吗 对我们所有人来说，问题不在于我们是否对成功具有摇摆不定的心理，而在于成功所引起的内心冲突是否强烈到足以阻碍我们通往成功的道路，是否阻碍了我们往前迈进的步伐，是否让我们从滋养生命的冒险中退缩，是否会束缚我们，以至于让我们丧失了自发性、好奇心以及面对挑战的勇气。 文化压力 我们每一个人都会受到自身所处的文化规范、性别角色和经济地位的影响，其中我们成功的机遇也会受其影响，这些影响对有些人有利，对另一些人则不利。对很多拖延者而言，文化上的影响也会给他们带来内心的冲突。举例而言，我们都身处一个忙忙碌碌的时代，一方面，有些人会利用拖延来抵抗这种文化压力，他们不想拥有一切; 另外一方面，一些想要拥有一切的人却发现拖延成了他们的障碍。 逃避成功的一般心理 成功需要太多付出: 这令我望而却步 有些人担心成功需要付出太多，远远超出了他们所能承受的程度。因为致力于成功需要付出很多时间、努力和专注，有些人认为他们达不到那样的要求，还是站在原地会比较安全。 竞争: 随便你，无所谓 通过拖延的方式，拖延者显得对竞争毫无兴趣，对胜利的回报也颇为冷淡。拖延者往往给人留下“随便你，无所谓”的印象，因为他们做事从不全力以赴。那些害怕失败的人不愿意加人到竞争中，因为他们害怕被人看出自己的软弱和无能。然而，那些害怕成功的人不愿意加入到竞争中是因为他们害怕自己胜出，从而通过拖延来掩藏自己的野心，因为他们认为竞争本身就有问题。]]></content>
      <tags>
        <tag>阅读</tag>
        <tag>拖延心理学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第二章 ——《拖延心理学》]]></title>
    <url>%2F2018%2F03%2F20%2Ftuoyan02%2F</url>
    <content type="text"><![CDATA[审问拖延：被架在审判席上的失败恐惧症很多拖延着担心被他人评判或者被自我评判，害怕自己的不足被发现，害怕付出最大的努力还是做得不够好，害怕达不到要求。他们的担心反映了一种恐惧失败的心理。 恐惧失败：追求完美 自我价值感=能力=表现 可以解释为（1）我做的事情直接反映了我的能力；（2）我的能力水平决定了我作为一个人所具有的价值——也就是说我的能力越强，我的自我价值感越高；（3）我所做的事情反映了我的个人价值。 对许多人而言，能力指的是智力上的能力，所以他们想要让他们做的每件事都表现出他们是多么的聪明。有些人则将能力定格在具有个人吸引力、风趣幽默、紧跟最新时尚或者拥有最新的掌上工具不管能力是如何定义的，当它成为了一个自我价值感的单一决定因素时，问题就产生了。这个人的表现如何成了唯一的衡量；其他的方面都被忽略了。一个出色的表现意味着一个出色的人；一个平庸的表现意味着一个平庸的人，这成了一个定论。 表现不在等同于能力，因为期间缺少完整的努力。这意味着不管最终表现如何，自我价值感与能力之间的关系还能得以维系。人们通过拖延来安慰自己，让自己相信他们的能力要大于其表现，他们甚至还维护着这样一种信念：他们的潜在能力是出色的、不可限量的。通过拖延，你永远不会逼着自己去面对自己的能力限制在哪里。 完美主义者的世界 拖延着往往就是完美主义者，拖延着为了证明他们足够优秀，他们力求做到不可能做到的事情，认为要达成他们远大的目标应该没有任何问题。他们常常对自己有不现实的要求，当无法实现这样的要求时，就会变得不知所措。失望之余，他们通过拖延让自己从中退却。 心理学家甄别出了两种类型的完美主义者，一种是适应型的，一种是适应不良型的。 适应型的完美主义者对自己的要求很高，并且相信自己能够表现的与之相符。这样一种能够如愿以偿的完美主义，感觉上去就像一个人本性的一部分，也是一个人自尊的基石。然而，一个适应不良的完美主义者，你对自己的要求跟你对自己的表现的期待之间存在着一种矛盾，所以你更容易去自责，也更容易感到消沉，你的自尊因而也处于较低的水平。 不完美的命运：真实和想像的后果 完美主义者在思考他们所做事情的时候容易绝对化，也经常以灾难性的方式思考问题；一件小事的后果（比如说一个小错误）往往被他们夸大到无以附加的程度。一件小事就足以让他们感到大祸临头。在他们这样的反应中，你可以看出是他们的固定心态在起作用。 这种灾难性的思想是极具破坏性的，在你没有意识到自己的这种思维模式的时候，情况尤为严重。如果你学者退后一步，重新审视自己所做的预判，你就能对所谓的“命运”的“必然性”另眼相看。 当我们发现自己已经陷入了完美主义者的心里瘫痪时，想像在那种情况下最糟糕的处境是什么。你可以提醒自己：虽然这些幻想的处境是自己所恐惧的，但是他们无一例外的被夸大了。同时，如果你更进一步，将自己的固定心态转化为成长心态，那么你或许会以全新的眼光来看待不完美——他是你提升自己、学习新知识的一个推动力。]]></content>
      <tags>
        <tag>阅读</tag>
        <tag>拖延心理学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一章 ——《拖延心理学》]]></title>
    <url>%2F2018%2F03%2F20%2Ftuoyan01%2F</url>
    <content type="text"><![CDATA[拖延VS行为了解你自己拖延的情绪根源涉及内心的感受、恐惧、希望、记忆、梦想、怀疑以及压力。但是很多拖延着并不能识别所有这些活跃于表面现象之下的情绪波动，因为他们利用拖延来逃避不舒服的感受。 拖延的另一个根源是拖延着与时间的纠葛。拖延着常常以一种“期望式思维”来看待时间，或者他们常常将时间看做一个需要制服和取胜的对手。这种对待时间的态度激发了更多的拖延。 拖延的生物根源包括我们的身体、大脑以及我们的遗传基因，他们都在我们的拖延中扮演了一定的角色。 拖延的人际关系根源主要是指你的家庭背景和社会关系，以及你在当今社会的地位。 质疑拖延：是可恶的坏习惯还是应得的报应拖延是长期以来人类都有的问题，塞缪尔写下了一段关于拖延的文字：“我们一直推迟我们知道我们最终无法逃避的事情，这样的蠢行是一个普遍的人性弱点，它或多或少都盘踞在看每个人的心灵之中。”。但是书中也给出了拖延和智力是没有关系的，因此不存在智力高的人就没有拖延这一说法。 我怎么知道我在拖延呢 其实只要想知道我们是不是真的在拖延，我们只需要区分拖延有没有成为你的一个问题，因此我们需要知道这件事是不是让你烦恼不已。在拖延问题让有些人痛苦不堪的同时，还有一些人却安然无恙，并没有感到他是一个多大的问题。 很多时候，人们往往可以的选择拖延，他们或许决定将事情延后，因为有些事情并不重要，或者因为他们·想要在做出决定或者付出行动之前好好想一想，他们拖延是为了利用这样的时间好好思考一下，让自己有所选择，或者想要将自己的注意力聚集到最重要的事情上。 还有些人不会烦恼是因为他们没有估计到任何困难，他们也不承认自己在拖延。他们或许对要花多长时间完成一项任务过于乐观，他们始终低估自己完成任务所需要的时间。 内在后果与外在后果 拖延可以带来严重的后果，拖延个拖延着造成的内在后果就是他们必须承受某些内在的情绪的折磨，从恼怒，后悔到强烈的自我谴责和绝望。外人可能看不出来这类拖延着的表现，但是在拖延着的内心深处，他们却感到极度辛苦，他们对自己感到挫败和愤怒，因为拖延使他们无法完成他们认为自己有能力完成的事情，虽然在外表上一切顺利，但是在内心他们却备受煎熬。 与此同时拖延产生的外在后果也很严重，你可能不会想到你的每一次拖延都会带来种种的影响。从而会产生一连串的影响，让你的人生变得手忙脚乱。 拖延怪圈 当我们开始一项新的任务时，刚开始我们信心满满，非常努力并且很有信心的想完成它，但是在这个过程中，一连串的思绪、情感和行为的波动影响了我们，.。这个就被成为“拖延怪圈”。 拖延的根源 其一是因为我们处于现在这个快速的社会中，要面临着社会中的各种压力。 拖延有时候会作为一种自我保护的心灵策略。 拖延可能是你对生活的一些顽固的信念。 “拖延着的信条”里的这些信念反映了拖延着的一种阻止自己取得进步的思维方式，。自责害怕以及灾难性的想法让他们不肯能越过日常生活中不可避免的困难。意识到你的思维方式是不现实的，这是克服拖延的第一步。 人之所以产生拖延的不良习性，是因为他们害怕。他们害怕如果他们行动了，他们的行为会让他们陷入麻烦。他们担心如果展示了自己真实的一面，会有危险的结果等着他们，在所有无序和拖拉的背后，他们其实在害怕他们不能被接受，以至于他们不仅要躲开这个世界，甚至还要躲开他们自己。虽然要忍受自责、自轻和对自己的反感是相当痛苦的，但是比起去看清楚真实的自我所带来的脆弱和无地自容，这样的感受或许更能够被承受的起，拖延是保护他们的盾牌。]]></content>
      <tags>
        <tag>阅读</tag>
        <tag>拖延心理学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java 8 实战]]></title>
    <url>%2F2018%2F03%2F20%2Fjava8%2F</url>
    <content type="text"><![CDATA[新特性流处理流是一系列数据项,一次只生成一项。程序可以从输入流中一个一个读取数据项,然后以同样的方式将数据项写入输出流。一个程序的输出流很可能是另一个程序的输入流。Java 8在 java.util.stream 中添加了一个Stream API。 用行为参数化把代码传递给方法Stream API就是构建在通过传递代码使操作行为实现参数化的思想上的,当把 compareUsingCustomerId 传进去,你就把sort 的行为参数化了。 并行与共享的可变数据//TODO java中的函数Java 8中新增了函数——值的一种新形式。它有助于流的使用. 方法和 Lambda 作为一等公民 例一（筛选隐藏的文件） java 8以前 12345File[] hiddenFiles = new File(".").listFiles(new FileFilter() &#123; public boolean accept(File file) &#123; return file.isHidden(); &#125; &#125;); java 8 1File[] hiddenFileList = new File(".").listFiles(File::isHidden); Java 8的方法引用 :: 语法(即“把这个方法作为值”)将其传给 listFiles 方法。 Lambda——匿名函数 Java 8还体现了更广义的将函数作为值的思想。比如,你现在可以写 (int x) - x + 1 ,表示“调用时给定参数 x,就返回 x + 1值的函数”。 传递代码:一个例子 假设你有一个 Apple 类,它有一个 getColor 方法,还有一个变量 inventory 保存着一个 Apples 的列表。你可能想要选出所有的绿苹果,并返回一个列表。通常我们用筛选(filter)一词来表达这个概念。 在Java 8之前,你可能会写这样一个方法filterGreenApples : 123456789public static List&lt;Apple&gt; filterGreenApples(List&lt;Apple&gt; inventory)&#123; List&lt;Apple&gt; result = new ArrayList&lt;&gt;(); for (Apple apple: inventory)&#123; if ("green".equals(apple.getColor())) &#123; //不同之处 result.add(apple); &#125; &#125; return result;&#125; 但是如果题目条件变为要筛选出重的苹果，你会发现你不得不重新再写一个方法，但是大部分代码是重复的。 123456789public static List&lt;Apple&gt; filterHeavyApples(List&lt;Apple&gt; inventory)&#123; List&lt;Apple&gt; result = new ArrayList&lt;&gt;(); for (Apple apple: inventory)&#123; if (apple.getWeight() &gt; 150) &#123; //不同之处 result.add(apple); &#125; &#125; return result;&#125; java 8的做法12345678910111213141516171819public static boolean isGreenApple(Apple apple) &#123; return "green".equals(apple.getColor());&#125;public static boolean isHeavyApple(Apple apple) &#123; return apple.getWeight() &gt; 150;&#125;public interface Predicate&lt;T&gt;&#123; boolean test(T t);&#125;static List&lt;Apple&gt; filterApples(List&lt;Apple&gt; inventory,Predicate&lt;Apple&gt; p) &#123; List&lt;Apple&gt; result = new ArrayList&lt;&gt;(); for (Apple apple: inventory)&#123; if (p.test(apple)) &#123; result.add(apple); &#125; &#125; return result;&#125; 如果要使用的话，就可以这样写： 123filterApples(inventory, Apple::isGreenApple);//或者filterApples(inventory, Apple::isHeavyApple); 从传递方法到 Lambda把方法作为值来传递显然很有用,但要是为类似于 isHeavyApple 和isGreenApple 这种可能只用一两次的短方法写一堆定义有点儿烦人。不过Java 8也解决了这个问题,它引入了一套新记法(匿名函数或Lambda),让你可以写12345filterApples(inventory, (Apple a) -&gt; "green".equals(a.getColor()) );//或者filterApples(inventory, (Apple a) -&gt; a.getWeight() &gt; 150 );//甚至filterApples(inventory, (Apple a) -&gt; a.getWeight() &lt; 80 || "brown".equals(a.getColor()) ); 流和Collection API相比,Stream API处理数据的方式非常不同。用集合的话,你得自己去做迭代的过程。你得用 for-each 循环一个个去迭代元素,然后再处理元素。我们把这种数据迭代的方法称为外部迭代。相反,有了Stream API,你根本用不着操心循环的事情。数据处理完全是在库内部进行的。我们把这种思想叫作内部迭代。Collection主要是为了存储和访问数据,而Stream则主要用于描述对数据的计算。 顺序处理：12345import static java.util.stream.Collectors.toList; List&lt;Apple&gt; heavyApples = inventory.stream().filter((Apple a) -&gt; a.getWeight() &gt; 150) .collect(toList()); 并行处理：12345import static java.util.stream.Collectors.toList; List&lt;Apple&gt; heavyApples = inventory.parallelStream().filter((Apple a) -&gt; a.getWeight() &gt; 150) .collect(toList()); 通过行为参数化传递代码行为参数化就是可以帮助你处理频繁变更的需求的一种软件开发模式。 例子 编写灵活的 prettyPrintApple 方法 编写一个 prettyPrintApple 方法,它接受一个 Apple 的 List ,并可以对它参数化,以多种方式根据苹果生成一个 String 输出(有点儿像多个可定制的 toString 方法)。例如,你可 以 告 诉 prettyPrintApple 方 法 , 只 打 印 每 个 苹 果 的 重 量 。 此 外 , 你 可 以 让prettyPrintApple 方法分别打印每个苹果,然后说明它是重的还是轻的。 首先,你需要一种表示接受 Apple 并返回一个格式 String 值的方法。123public interface AppleFormatter&#123; String accept(Apple a);&#125; 现在你就可以通过实现 AppleFormatter 方法,来表示多种格式行为了:12345678910111213public class AppleFancyFormatter implements AppleFormatter&#123; public String accept(Apple apple)&#123; String characteristic = apple.getWeight() &gt; 150 ? "heavy" : "light"; return "A " + characteristic + " " + apple.getColor() +" apple"; &#125;&#125;public class AppleSimpleFormatter implements AppleFormatter&#123; public String accept(Apple apple)&#123; return "An apple of " + apple.getWeight() + "g"; &#125;&#125; 最后,你需要告诉 prettyPrintApple 方法接受 AppleFormatter 对象,并在内部使用它们。你可以给 prettyPrintApple 加上一个参数:1234567public static void prettyPrintApple(List&lt;Apple&gt; inventory, AppleFormatter formatter)&#123; for(Apple apple: inventory)&#123; String output = formatter.accept(apple); System.out.println(output); &#125;&#125; 现在你就可以给 prettyPrintApple 方法传递多种行为了。为此,你首先要实例化 AppleFormatter 的实现,然后把它们作为参数传给 prettyPrintApple :1234567891011prettyPrintApple(inventory, new AppleFancyFormatter());这将产生一个类似于下面的输出:A light green appleA heavy red apple...或者试试这个:prettyPrintApple(inventory, new AppleSimpleFormatter());这将产生一个类似于下面的输出: 11An apple of 80gAn apple of 155g... 上面的代码将行为抽象了出来，可以很好的适应不同需求的变化。但这个过程很啰嗦,因为你需要声明很多只要实例化一次的类。 对付罗嗦匿名类匿名类和你熟悉的Java局部类(块中定义的类)差不多,但匿名类没有名字。它允许你同时声明并实例化一个类。换句话说,它允许你随用随建。 使用匿名类进行优化12345List&lt;Apple&gt; redApples = filterApples(inventory, new ApplePredicate() &#123; public boolean test(Apple apple)&#123; return "red".equals(apple.getColor()); &#125;&#125;); 但匿名类还是不够好。第一,它往往很笨重,因为它占用了很多空间。第二,很多程序员觉得它用起来很让人费解。 使用 Lambda 表达式进行优化上面的代码在Java 8里可以用Lambda表达式重写为下面的样子:12List&lt;Apple&gt; result = filterApples(inventory, (Apple apple) -&gt; "red".equals(apple.getColor())); 对以上的优化思路做一个总结 Lambda表达式Lambda 管中窥豹可以把Lambda表达式理解为简洁地表示可传递的匿名函数的一种方式:它没有名称,但它有参数列表、函数主体、返回类型,可能还有一个可以抛出的异常列表。 java 8中有效的Lambda表达式 Lambda表达式有三个部分 参数列表——这里它采用了 Comparator 中 compare 方法的参数,两个 Apple 。 箭头——箭头 -&gt; 把参数列表与Lambda主体分隔开。 Lambda主体——比较两个 Apple 的重量。表达式就是Lambda的返回值了。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第十八章 ——《拖延心理学》]]></title>
    <url>%2F2018%2F03%2F20%2Ftuoyan%2F</url>
    <content type="text"><![CDATA[拖延VS建议 聪明摆脱被动拖延的怪圈 不管你本人是否也是一个拖延者，如果你跟一个总是延误事情的人一起生活或是工作，你很可能自己也会陷入挣扎之中，因为你陡然地想要激发拖延者的斗志，让他们才去行动，而结果只会让你更加沮丧。 相互挫败的怪圈 拖延者对他们所做的或所没有做的事情经常含含糊糊,让你以为事情进展比真实情况要好得多。这是一件令人气馁的事情，拖延者要么不想告诉你实情，要么不敢。这让你感到受骗上当或者被人出卖，这就使得你们的关系陷人紧张与冲突之中。 跟拖延者谈判 什么事不起作用的 1、说“只管做！”2、啰嗦与成为监工3、责备、嘲弄或者使用极端或夸张的后果加以威胁4、自己做5、说“我早就告诉你是这样的！” 起作用的态度 1、培养成长心态2、保持你的个人立场3、注意神经认知上的差异4、协作态度5、对自己的策略保持弹性6、记住什么是最重要的 特殊技巧 对父母的建议1、帮助你的孩子设定小目标2、帮助你的孩子识别时长3、设置清晰的限定和结果4、以相应的奖赏作为鼓励5、记住这是谁的事情6、尊重你孩子对于独立自主的需要7、无论什么时候在你孩子身上或你自己身上发现完美主义倾向，都要跟他作斗争8、谈论恐惧——你自己的，也包括你孩子的9、用好奇心而不是用判断来聆听孩子所告诉你的事情10、看一下是否存在某些潜在的且需要专业治疗的情况，这些情况包括：]]></content>
      <tags>
        <tag>阅读</tag>
        <tag>拖延心理学</tag>
      </tags>
  </entry>
</search>
